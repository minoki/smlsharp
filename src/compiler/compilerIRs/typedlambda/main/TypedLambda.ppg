(**
 * @copyright (c) 2006, Tohoku University.
 * @author Atsushi Ohori
 * @author Duc-Huu NGUYEN
 * @version $Id: TypedLambda.ppg,v 1.50 2008/08/06 17:23:41 ohori Exp $
 *)
structure TypedLambda =
struct

  type loc = Loc.loc

  (*%
   * @formatter(Types.ty) Types.format_ty
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(Types.ty) Types.format_ty
   *)
  type ty =
      (*% @format(ty) ty *)
      (*% 
        * @prefix formatWithType_
          @format(ty) ty
       *)
      Types.ty

  (*%
   * @formatter(RecordCalc.varInfo) RecordCalc.format_varInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(RecordCalc.varInfo) RecordCalc.formatWithType_varInfo
   *)
  type varInfo =
      (*% *)
      (*% @prefix formatWithType_ @format(v) v *)
      RecordCalc.varInfo

  (*%
   * @formatter(RecordCalc.exVarInfo) RecordCalc.format_exVarInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(RecordCalc.exVarInfo) RecordCalc.formatWithType_exVarInfo
   *)
  type exVarInfo =
      (*% *)
      (*% @prefix formatWithType_ @format(v) v *)
      RecordCalc.exVarInfo

  (*%
   * @formatter(Types.btvEnv) Types.format_btvEnv
   * @formatter(extendBtvEnv) TermFormat.extendBtvEnv
   * @formatter(appList) TermFormat.formatAppList
   *)
  type primTy =
      (*%
       * @format({boundtvars, argTyList: argTy argTys, resultTy})
       * "[" !N0{ 2[
       *   {boundtvars "."}
       *   +1
       *   argTys:appList
       *     (argTy)("{",",","}")
       *   +1 "->" +d resultTy
       * ] "]" }
       *)
       {boundtvars : Types.btvEnv, argTyList : ty list, resultTy : ty}

  (*%
   * @formatter(BuiltinPrimitive.primitiveTypedLambda)
   * BuiltinPrimitive.format_primitiveTypedLambda
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BuiltinPrimitive.primitiveTypedLambda)
   * BuiltinPrimitive.format_primitiveTypedLambda
   * @formatter(primTy) format_primTy
   *)
  type primInfo =
      (*%
       * @format({primitive, ty})
       * primitive
       *)
      (*%
       * @prefix formatWithType_
       * @format({primitive, ty})
       * L2{ primitive +1 ":" +d ty }
       *)
      {
        primitive : BuiltinPrimitive.primitiveTypedLambda,
        ty : primTy
      }

  (*%
   * @formatter(Types.btvEnv) Types.format_btvEnv
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(Types.btvEnv) Types.format_btvEnv
   *)
  type btvEnv =
      (*% @format(btv) btv *)
      (*% 
          @prefix formatWithType_
          @format(btv) btv
       *)
      Types.btvEnv

  (*%
   * @formatter(Int8.int) TermFormat.format_Int8_dec_ML
   * @formatter(Int16.int) TermFormat.format_Int16_dec_ML
   * @formatter(Int32.int) TermFormat.format_Int32_dec_ML
   * @formatter(Int64.int) TermFormat.format_Int64_dec_ML
   * @formatter(Word8.word) TermFormat.format_Word8_hex_ML
   * @formatter(Word16.word) TermFormat.format_Word16_hex_ML
   * @formatter(Word32.word) TermFormat.format_Word32_hex_ML
   * @formatter(Word64.word) TermFormat.format_Word64_hex_ML
   * @formatter(Word8.word) TermFormat.format_Word8_hex_ML
   * @formatter(Real64.real) TermFormat.format_Real64_ML
   * @formatter(Real32.real) TermFormat.format_Real32_ML
   * @formatter(char) TermFormat.format_char_ML
   * @formatter(DynamicKind.size') DynamicKind.format_size'
   * @formatter(DynamicKind.tag') DynamicKind.format_tag'
   * @formatter(DynamicKind.index') DynamicKind.format_index'
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(Int8.int) TermFormat.format_Int8_dec_ML
   * @formatter(Int16.int) TermFormat.format_Int16_dec_ML
   * @formatter(Int32.int) TermFormat.format_Int32_dec_ML
   * @formatter(Int64.int) TermFormat.format_Int64_dec_ML
   * @formatter(Word8.word) TermFormat.format_Word8_hex_ML
   * @formatter(Word16.word) TermFormat.format_Word16_hex_ML
   * @formatter(Word32.word) TermFormat.format_Word32_hex_ML
   * @formatter(Word64.word) TermFormat.format_Word64_hex_ML
   * @formatter(Real64.real) TermFormat.format_Real64_ML
   * @formatter(Real32.real) TermFormat.format_Real32_ML
   * @formatter(char) TermFormat.format_char_ML
   * @formatter(DynamicKind.size') DynamicKind.format_size'
   * @formatter(DynamicKind.tag') DynamicKind.format_tag'
   * @formatter(DynamicKind.index') DynamicKind.format_index'
   *)
  datatype tlconst =
      (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "i8" +d x }
       *)
      INT8 of Int8.int
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "i16" +d x }
       *)
      INT16 of Int16.int
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "i32" +d x }
       *)
      INT32 of Int32.int
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "i64" +d x }
       *)
      INT64 of Int64.int
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "w8" +d x }
       *)
      WORD8 of Word8.word
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "w16" +d x }
       *)
      WORD16 of Word16.word
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "w32" +d x }
       *)
      WORD32 of Word32.word
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "w64" +d x }
       *)
      WORD64 of Word64.word
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "contag" +d x }
       *)
      CONTAG of Word32.word
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "r64" +d x }
       *)
      REAL64 of Real64.real
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "r32" +d x }
       *)
      REAL32 of Real32.real
    | (*%
       * @format(x) x
       *)
      (*% @prefix formatWithType_
       * @format(x) { "char" +d x }
       *)
      CHAR of Char.char
    | (*%
       * @format "()"
       *)
      (*% @prefix formatWithType_
       * @format "()"
       *)
      UNIT
    | (*%
       * @format "NULLPOINTER"
       *)
      (*% @prefix formatWithType_
       * @format "NULLPOINTER"
       *)
      NULLPOINTER
    | (*%
       * @format "NULLBOXED"
       *)
      (*% @prefix formatWithType_
       * @format "NULLBOXED"
       *)
      NULLBOXED
    | (*%
       * @format(x * ty) x
       *)
      (*% @prefix formatWithType_
       * @format(x * ty) x
       *)
      SIZE of DynamicKind.size' * ty
    | (*%
       * @format(x * ty) x
       *)
      (*% @prefix formatWithType_
       * @format(x * ty) x
       *)
      TAG of DynamicKind.tag' * ty
    | (*%
       * @format(x * lab * ty) x
       *)
      (*% @prefix formatWithType_
       * @format(x * lab * ty) x
       *)
      INDEX of DynamicKind.index' * RecordLabel.label * ty

  (*%
   * @formatter(IntInf.int) TermFormat.format_IntInf_dec_ML
   * @formatter(string) TermFormat.format_string_ML
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(IntInf.int) TermFormat.format_IntInf_dec_ML
   * @formatter(string) TermFormat.format_string_ML
   *)
  datatype tlstring =
      (*% @format(x) x *)
      (*% @prefix formatWithType_ @format(x) x *)
      INTINF of IntInf.int
    | (*% @format(x) x *)
      (*% @prefix formatWithType_ @format(x) x *)
      STRING of string

  (*% *)
  (*% @prefix formatWithType_ *)
  datatype constant =
      (*% @format(x) x *)
      (*% @prefix formatWithType_ @format(x) x *)
      C of tlconst
    | (*% @format(x) x *)
      (*% @prefix formatWithType_ @format(x) x *)
      S of tlstring

  (*%
   * @formatter(optionalList) TermFormat.formatOptionalList
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(ifCons) TermFormat.formatIfCons
   * @formatter(formatRecordExp) TermFormat.formatRecordExp
   * @formatter(withType) formatWithType_varInfo
   * @formatter(extendBtvEnv) TermFormat.extendBtvEnv
   * @formatter(FunLocalLabel.id) FunLocalLabel.format_id
   * @formatter(BuiltinPrimitive.cast) BuiltinPrimitive.format_cast
   * @formatter(RecordLabel.label) RecordLabel.format_label
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(optionalList) TermFormat.formatOptionalList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(ifCons) TermFormat.formatIfCons
   * @formatter(formatRecordExp) TermFormat.formatRecordExp
   * @formatter(extendBtvEnv) TermFormat.extendBtvEnv
   * @formatter(btvEnv) format_btvEnv
   * @formatter(FunLocalLabel.id) FunLocalLabel.format_id
   * @formatter(BuiltinPrimitive.cast) BuiltinPrimitive.format_cast
   * @formatter(RecordLabel.label) RecordLabel.format_label
   *)
  datatype tlexp =
      (*%
       * @format({funExp, attributes, argExpList: arg args, resultTy, loc})
       * L8{ 1[
       *   "_FFIAPPLY"
       *   +1 funExp
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, attributes, argExpList: arg args, resultTy, loc})
       * L8{ 2[
       *   "_FFIAPPLY"
       *   +1 funExp
      *    +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      TLFOREIGNAPPLY of
      {
        funExp : tlexp,
        attributes : FFIAttributes.attributes,
        argExpList : tlexp list,
        resultTy : ty option,
        loc : loc
      }
    | (*%
       * @format({attributes, resultTy, argVarList: arg args, bodyExp, loc})
       * L8{ 2[
       *   "_callback"
       *   +1 
       *    R1{ 2[
       *     "fn" +d args:enclosedList(arg:withType)
       *                              ("{",",","}")
       *          +d "=>" +1 bodyExp ] }
       * ] }
       *)
      (*% @prefix formatWithType_
       * @format({attributes, resultTy, argVarList: arg args, bodyExp, loc})
       * L8{ 2[
       *   "_callback"
       *   +1
       *    R1{ 2[
       *     "fn" +d args:enclosedList(arg)("{",",","}")
       *          +d "=>" +1 bodyExp ] }
       * ] }
       *)
      TLCALLBACKFN of
      {
        attributes : FFIAttributes.attributes,
        resultTy : ty option,
        argVarList : varInfo list,
        bodyExp : tlexp,
        loc : loc
      }
    | (*%
       * @format({ty, loc})
       * "_sizeof(" ty ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({ty, loc})
       * "_sizeof(" ty ")"
       *)
      TLSIZEOF of {ty : ty, loc : loc}
    | (*%
       * @format({ty, loc})
       * "_tagof(" ty ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({ty, loc})
       * "_tagof(" ty ")"
       *)
      TLTAGOF of {ty : ty, loc : loc}
    | (*%
       * @format({label, recordTy, loc})
       * "_indexof(" !N0{ label "," +1 recordTy ")" }
       *)
      (*%
       * @prefix formatWithType_
       * @format({label, recordTy, loc})
       * "_indexof(" !N0{ label "," +1 recordTy ")" }
       *)
      TLINDEXOF of {label : RecordLabel.label, recordTy : ty, loc : loc}
    | (*%
       * @format({const, ty, loc}) const
       *)
      (*%
       * @prefix formatWithType_
       * @format({const, ty, loc}) const
       *)
      TLCONSTANT of {const : constant, ty : ty, loc : loc}
    | (*%
       * @format({name, ty, loc})
       * "_FOREIGNSYMBOL(" name ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({name, ty, loc})
       * "_FOREIGNSYMBOL(" !N0{ name +1 ":" +d ty } ")"
       *)
      TLFOREIGNSYMBOL of
      {name : string, ty : ty, loc : loc}
    | (*%
       * @format({varInfo, loc}) varInfo
       *)
      (*%
       * @prefix formatWithType_
       * @format({varInfo, loc}) varInfo
       *)
      TLVAR of {varInfo : varInfo, loc : loc}
    | (*%
       * @format({exVarInfo, loc}) "EXVAR(" !N0{ exVarInfo } ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, loc}) "EXVAR(" !N0{ exVarInfo } ")"
       *)
      TLEXVAR of {exVarInfo : exVarInfo, loc : loc}
    | (*%
         @format({primInfo, argExpList: arg args, instTyList: ty tys, loc})
         !N0{ 1[ "_PRIM(" primInfo
               tys:ifCons()(tys:optionalList(ty)("{",",","}") )
              ")"
               +1
               {args:appList(arg)("(",","1,")")}
              ]
           }
       *)
      (*%
       * @prefix formatWithType_
       * @format({primInfo, argExpList: arg args, instTyList: ty tys, loc})
       * L8{ 2[ "_PRIMAPPLY(" primInfo ")"
       *        tys:ifCons()( +1 tys:appList(ty)("(",",",")") )
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      TLPRIMAPPLY of
      {
        primInfo : primInfo,
        argExpList : tlexp list,
        instTyList : ty list,
        loc : loc
      }
    | (*%
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ 1[
       *   funExp
       *   +1 args:appList(arg)("{",",","}")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ 2[
       *   L2{ funExp +1 ":" +d funTy }
       *   +1 args:appList(arg)("{",",","}")
       * ] }
       *)
      TLAPPM of
      {
        funExp : tlexp,
        funTy : ty,
        argExpList : tlexp list,
        loc : loc
      }
    | (*%
       * @format({localDecl, mainExp, loc})
          "let"
               1[ +1 localDecl ]
          +1 "in" 
               1[ +1 mainExp]
          +1 "end"
       *)
      (*%
       * @prefix formatWithType_
       * @format({localDecl, mainExp, loc})
       * L2{ !N0{
       *   "let" 2[ +1 localDecl ]
       *   +1 "in" 2[ +1 !N0{ mainExp } ]
       *   +1 "end"
       * } }
       *)
      TLLET of
      {
        localDecl : tldecl,
        mainExp : tlexp,
        loc : loc
      }
    | (*%
       * @format({fields:field fields, recordTy, isMutable, loc})
       * fields:formatRecordExp(field)
       *)
      (*%
       * @prefix formatWithType_
       * @format({fields:field fields, recordTy, isMutable, loc})
       * L2{ fields:formatRecordExp(field)
       *     +1 ":" +d recordTy }
       *)
      TLRECORD of
      {
        isMutable : bool,
        fields : tlexp RecordLabel.Map.map,
        recordTy : ty,
        loc : loc
      }
    | (*%
       * @format({recordExp, indexExp, label, recordTy, resultTy, loc})
       * L8{ 1[ "#" label
       *       +1 indexExp
       *       +1 recordExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, indexExp, label, recordTy, resultTy, loc})
       * L2{
       * L8{ 2[ "#" label
       *        +1 indexExp
       *        +1 L2{ recordExp
       *               +1 ":" +d recordTy } ] }
       * +1 ":" +d resultTy }
       *)
      TLSELECT of
      {
        recordExp : tlexp,
        indexExp : tlexp,
        label : RecordLabel.label,
        recordTy : ty,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy, loc})
       * L8{ 1[ recordExp
       *       +1 "#" +d "{"
       *         !N0{ L2{ label +1 "/" +d indexExp } +d "="
       *              1[ +1 valueExp ] } "}" ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy, loc})
       * L8{ 2[ L2{ recordExp +1 ":" +d recordTy }
       *        +1 "#" +d "{"
       *          !N0{ L2{ label +1 "/" +d indexExp } +d "="
       *               2[ +1 valueExp ] } "}" ] }
       *)
      TLMODIFY of
      {
        recordExp : tlexp,
        recordTy : ty,
        indexExp : tlexp,
        label : RecordLabel.label,
        valueExp : tlexp,
        valueTy : ty,
        loc : loc
      }
    | (*%
       * @format({argExp, resultTy, loc})
       * R1{ 1[ "raise" +1 argExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argExp, resultTy, loc})
       * L2{ R1{ 2[ "raise" +1 argExp ] }
       *     +1 ":" +d resultTy }
       *)
      TLRAISE of
      {
        argExp : tlexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({exp, exnVar, handler, resultTy, loc})
       * R1{ "_try"
       *     1[ +1 exp ]
       *     +1 "handle" +d { exnVar +1 "=>" }
       *     1[ +1 handler ]
       *     +1 "end" }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, exnVar, handler, resultTy, loc})
       * L2{
       * R1{ "_try"
       *     2[ +1 exp ]
       *     +1 "handle" +d { exnVar +1 "=>" }
       *     2[ +1 handler ]
       *     +1 "end" }
       * +1 ":" +d resultTy }
       *)
      TLHANDLE of
      {
        exp : tlexp,
        exnVar : varInfo,
        handler : tlexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
        @format({switchExp, expTy, branches: branch branches, defaultExp,
                 resultTy, loc})
        R1{
            { 1[ "case" +1 switchExp +1 "of" ] }
            branches:caseList(branch)
              (1[+1], +1 "|" +d, !N0{ 1[ "_" +d "=>" +1 defaultExp ] })
          }
         @format:branch({constant, exp})
           !N0{ 1[ constant +d "=>" +1 exp ]
              }
       *)
      (*%
       * @prefix formatWithType_
       * @format({switchExp, expTy, branches: branch branches, defaultExp,
       *          resultTy, loc})
       * L2{
       * R1{
       *   { 2[ "case" +1 L2{ switchExp +1 ":" +d expTy }
       *        +1 "of" ] }
       *   branches:caseList(branch)
       *     (2[+1], +1 "|" +d, 2[ "_" +d "=>" +1 defaultExp ])
       * }
       * +1 ":" +d resultTy }
       * @format:branch({constant, exp})
       * 2[ constant +d "=>" +1 exp ]
       *)
      TLSWITCH of
      {
        switchExp : tlexp,
        expTy : ty,
        branches : {constant : tlconst, exp : tlexp} list,
        defaultExp : tlexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({catchLabel, argVarList: arg args, catchExp, tryExp, resultTy,
       *          loc})
       * R0{ tryExp
       *     +1 
       *     !R0{ "_catch" +d
       *          L8{ catchLabel
       *              +1 1[ args:appList(arg)("{",",","}") ] }
       *          +d "=>" 1[ +1 catchExp ] } }
       *)
      (*%
       * @prefix formatWithType_
       * @format({catchLabel, argVarList: arg args, catchExp, tryExp, resultTy,
       *          loc})
       * L2{
       *   R0{ tryExp
       *     +1 
       *     !R0{ "_catch" +d
       *          L8{ catchLabel
       *              +1 1[ args:appList(arg)("{",",","}") ] }
       *          +d "=>" 1[ +1 catchExp ] } }
       *   +1 ":" +d resultTy }
       *)
      (* lightweight exception that unwind call stack *)
      TLCATCH of
      {
        catchLabel : FunLocalLabel.id,
        argVarList : varInfo list,
        catchExp : tlexp,
        tryExp : tlexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({catchLabel, argExpList: arg args, resultTy, loc})
       * R0{ "_throw"
       *     1[ +1 L8{ catchLabel
       *               +1 1[ args:appList(arg)("{",",","}") ] } ] }
       *)
      (*% @prefix formatWithType_
       * @format({catchLabel, argExpList: arg args, resultTy, loc})
       * L2{
       *   R0{ "_throw"
       *     1[ +1 L8{ catchLabel
       *               +1 1[ args:appList(arg)("{",",","}") ] } ] }
       *   +1 ":" +d resultTy }
       *)
      (* lightweight exception that does not unwind call stack *)
      TLTHROW of
      {
        catchLabel : FunLocalLabel.id,
        argExpList : tlexp list,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({argVarList: arg args, bodyTy, bodyExp, loc})
       * R1{ "fn" +d {args:appList(arg)("{",",","}")} +d "=>"
       *     1[ +1 bodyExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argVarList: arg args, bodyTy, bodyExp, loc})
       * R1{ "fn" +d args:appList(arg)("{",",","}") +d "=>"
       *     3[ +1 L2{ bodyExp +1 ":" +d bodyTy } ] }
       *)
      TLFNM of
      {
        argVarList : varInfo list,
        bodyTy : ty,
        bodyExp : tlexp,
        loc : loc
      }
    | (*%
       * @format({btvEnv:btv, expTyWithoutTAbs, exp, loc})
       * "[" !N0{ btv "."
       *          +1 exp } "]"
       *)
      (*%
       * @prefix formatWithType_
       * @format({btvEnv:btv, expTyWithoutTAbs, exp, loc})
       * "[" !N0{
       *   btv "."
       *   +1 L2{ exp
       *          +1 ":" +d expTyWithoutTAbs }
       * } "]"
       *)
      TLPOLY of
      {
        btvEnv : btvEnv,
        expTyWithoutTAbs : ty,
        exp : tlexp,
        loc : loc
      }
    | (*%
       * @format({exp, expTy, instTyList: ty tys, loc})
       * L8{ 1[ exp
       *        +1 tys:enclosedList(ty)("{",",","}") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, instTyList: ty tys, loc})
       * L8{ 2[ L2{ exp +1 ":" +d expTy }
       *        +1 tys:enclosedList(ty)("{",",","}") ] }
       *)
      TLTAPP of
      {
        exp : tlexp,
        expTy : ty,
        instTyList : ty list,
        loc : loc
      }
    | (*%
       * @format({exp, expTy, targetTy, cast, loc})
       * cast "(" !N0{ exp } ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, targetTy, cast, loc})
       * cast "(" !N0{ exp +1 ":" +d expTy +1 ":" +d targetTy } ")"
       *)
      TLCAST of
      {
        exp : tlexp,
        expTy : ty,
        targetTy : ty,
        cast : BuiltinPrimitive.cast,
        loc : loc
      }

  and tldecl =
      (*%
        @format({boundVar, boundExp, loc})
         !N0{"val" +d boundVar +d "="
              1[ +1 boundExp ]
            }
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVar, boundExp, loc})
       * "val" +d boundVar +d "="
       *   4[ +1 boundExp ]
       *)
      TLVAL of
      {
        boundVar : varInfo,
        boundExp : tlexp,
        loc : loc
      }
    | (*%
       * @format({recbindList: bind binds, loc})
       * binds:decList(bind)("val" +d "rec" +d, +1 "and" +d)
       * @format:bind({boundVar, boundExp})
       * boundVar +d "=" 1[ +1 boundExp ]
       *)
      (*%
       * @prefix formatWithType_
       * @format({recbindList: bind binds, loc})
       * binds:decList(bind)("val" +d "rec" +d, +1 "and" +d)
       * @format:bind({boundVar, boundExp})
       * boundVar +d "=" 4[ +1 boundExp ]
       *)
      TLVALREC of
      {
        recbindList : {boundVar : varInfo, boundExp : tlexp} list,
        loc : loc
      }
    | (*%
       * @format({weak, exVarInfo, exp, loc})
       * !R1{ "export" +d "val" +d exVarInfo
       *      2[ +d "=" +1 exp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({weak, exVarInfo, exp, loc})
       * !R1{ "export" +d "val" +d exVarInfo
       *      2[ +d "=" +1 exp ] }
       *)
      TLEXPORTVAR of
      {
        weak : bool,
        exVarInfo : exVarInfo,
        exp : tlexp,
        loc : loc
      }
    | (*%
       * @format(exVarInfo * provider * loc)
       * "extern" +d "val" +d exVarInfo
       *)
      (*%
       * @prefix formatWithType_
       * @format(exVarInfo * provider * loc)
       * "extern" +d "val" +d exVarInfo
       *)
      TLEXTERNVAR of exVarInfo * Types.provider * loc

end
