(**
 * The typed pattern calculus for the IML.
 * @copyright (c) 2006, Tohoku University.
 * @author Atsushi Ohori 
 * @author Liu Bochao
 * @version $Id: TypedCalc.ppg,v 1.36.6.7 2010/02/10 05:17:29 hiro-en Exp $
 *)
structure TypedCalc = struct

  structure T = Types
  structure I = IDCalc

  (*% @formatter(Loc.loc) Loc.format_loc *)
  type loc = Loc.loc

  (*% 
    @formatter(Symbol.longsymbol) Symbol.format_longsymbol
   *)
  (*% @prefix formatWithType_
    @formatter(Symbol.longsymbol) Symbol.format_longsymbol
   *)
  type longsymbol = Symbol.longsymbol

  (*% 
     @formatter(FFIAttributes.attributes) FFIAttributes.format_attributes
   *)
  (*% @prefix formatWithType_
     @formatter(FFIAttributes.attributes) FFIAttributes.format_attributes
   *)
  type ffiAttributes 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      FFIAttributes.attributes
        
  (*%
     @formatter(tyformat) T.format_ty
   *)
  (*% @prefix formatWithType_
     @formatter(tyformat) T.format_ty
   *)
  type ty 
    = (*%  
         @format(ty:tyformat) ty
       *)
      (*% @prefix formatWithType_
         @format(ty:tyformat) ty
       *) 
      T.ty

  (*%
     @formatter(T.btvEnv) T.format_btvEnv
   *)
  (*% @prefix formatWithType_
     @formatter(T.btvEnv) T.format_btvEnv
   *)
  type btvEnv 
    = (*% 
         @format(btv) 
       *)
      (*% @prefix formatWithType_
         @format(btv) btv
       *) 
      T.btvEnv

  (*% 
     @formatter(PatternCalc.caseKind) PatternCalc.format_caseKind
    *)
  (*% @prefix formatWithType_
     @formatter(PatternCalc.caseKind) PatternCalc.format_caseKind
    *)
  type caseKind 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      PatternCalc.caseKind

  (*% 
     @formatter(I.typId) I.format_typId
   *)
  (*% @prefix formatWithType_
     @formatter(I.typId) I.formatWithType_typId
   *)
  type typId 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      I.typId

  (*% 
     @formatter(I.conId) I.format_conId
   *)
  (*% @prefix formatWithType_
     @formatter(I.conId) I.formatWithType_conId
   *)
  type conId 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      I.conId

  (*% 
     @formatter(I.varId) I.format_varId
    *)
  (*% @prefix formatWithType_
     @formatter(I.varId) I.formatWithType_varId
    *)
  type varId 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      I.varId

  (*% 
     @formatter(I.exnId) I.format_exnId
   *)
  (*% @prefix formatWithType_
     @formatter(I.exnId) I.formatWithType_exnId
   *)
  type exnId 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      I.exnId

  (*%
     @formatter(I.oprimId) I.format_oprimId 
   *)
  (*% @prefix formatWithType_
     @formatter(I.oprimId) I.formatWithType_oprimId 
   *)
  type oprimId 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      I.oprimId

  (*%
     @formatter(I.tvarId) I.format_tvarId 
   *)
  (*% @prefix formatWithType_
     @formatter(I.tvarId) I.formatWithType_tvarId 
   *)
  type tvarId 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      I.tvarId

  (*%
     @formatter(AbsynConst.constant) AbsynConstFormatter.format_constant 
   *)
  (*% @prefix formatWithType_
     @formatter(AbsynConst.constant) AbsynConstFormatter.format_constant 
   *)
  type constant 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      AbsynConst.constant

  (*%
     @formatter(I.tvar) I.format_tvar 
   *)
  (*% @prefix formatWithType_
     @formatter(I.tvar) I.formatWithType_tvar 
   *)
  type tvar 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      I.tvar

  (*%
     @formatter(I.tfun) I.format_tfun 
   *)
  (*% @prefix formatWithType_
     @formatter(I.tfun) I.formatWithType_tfun 
   *)
  type tfun 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      I.tfun

  (*%
     @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
   *)
  (*% @prefix formatWithType_
     @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
   *)
  type primitive 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      BuiltinPrimitive.primitive

  (*% 
     @formatter(T.varInfo) T.format_varInfo
   *)
  (*% @prefix formatWithType_
     @formatter(T.varInfo) T.formatWithType_varInfo
   *)
  type varInfo 
    = (*%
        @format(var) var
       *)
      (*% @prefix formatWithType_
        @format(var) var
       *)
      T.varInfo

  (*%
     @formatter(T.exVarInfo) T.format_exVarInfo 
   *)
  (*% @prefix formatWithType_
     @formatter(T.exVarInfo) T.formatWithType_exVarInfo 
   *)
  type exVarInfo 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      T.exVarInfo

  (*%
     @formatter(T.primInfo) T.format_primInfo 
   *)
  (*% @prefix formatWithType_
     @formatter(T.primInfo) T.formatWithType_primInfo 
   *)
  type primInfo 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      T.primInfo

  (*%
     @formatter(T.oprimInfo) T.format_oprimInfo 
   *)
  (*% @prefix formatWithType_
     @formatter(T.oprimInfo) T.format_oprimInfo 
   *)
  type oprimInfo 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      T.oprimInfo

  (*% 
     @formatter(T.conInfo) T.format_conInfo
   *)
  (*% @prefix formatWithType_
     @formatter(T.conInfo) T.format_conInfo
   *)
  type conInfo
    = (*%
        @format(con) con
       *)
      (*% @prefix formatWithType_
        @format(con) con
       *)
      T.conInfo

  (*%
     @formatter(T.exnInfo) T.format_exnInfo 
   *)
  (*% @prefix formatWithType_
     @formatter(T.exnInfo) T.format_exnInfo 
   *)
  type exnInfo 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x
       *)
      T.exnInfo

  (*%
     @formatter(T.exExnInfo) T.format_exExnInfo 
   *)
  (*% @prefix formatWithType_
     @formatter(T.exExnInfo) T.format_exExnInfo 
   *)
  type exExnInfo 
    = (*%
         @format(x) x
       *)
      (*% @prefix formatWithType_
         @format(x) x 
      *)
      T.exExnInfo

  (*%
     @formatter(T.varInfo) T.format_varInfo
   *)
  (*% @prefix formatWithType_
     @formatter(T.varInfo) T.formatWithType_varInfo
   *)
  datatype idstatus 
    = (*% 
         @format(var) var
       *)
      (*% @prefix formatWithType_
         @format(var) var
       *)
      VARID of T.varInfo
    | (*% 
         @format(var * int) var
       *)
      (*% @prefix formatWithType_
         @format(var * int) "(rf" var ")"
       *)
      RECFUNID of T.varInfo * int

  (*% 
   *)
  (*% @prefix formatWithType_
   *)
  datatype exnCon 
    = (*% 
         @format(exn) exn
       *)
      (*% @prefix formatWithType_
         @format(exn) exn
       *)
      EXN of exnInfo
    | (*% 
         @format(exn) exn
       *)
      (*% @prefix formatWithType_
         @format(exn) exn
       *)
      EXEXN of exExnInfo

 (*%
  * @formatter(appList) TermFormat.formatAppList
  * @formatter(recordList) TermFormat.formatEnclosedList
  * @formatter(RecordLabel.label) RecordLabel.format_label
  *)
 (*% @prefix formatWithType_
  * @formatter(appList) TermFormat.formatAppList
  * @formatter(recordList) TermFormat.formatEnclosedList
  * @formatter(RecordLabel.label) RecordLabel.format_label
  *)
 datatype ffiTy =
     (*%
        @format(attr * dom doms * var vars varsOpt * ran rans * loc)
        R4{ doms:appList(dom)("(",",",")")
            varsOpt(vars:appList(var)("(",",",")"))
           +1 "->" +d rans:appList(ran)("(",",",")") }
      *)
     (*% @prefix formatWithType_
        @format(attr * dom doms * var vars varsOpt * ran rans * loc)
        R4{ doms:appList(dom)("(",",",")")
            varsOpt(vars:appList(var)("(",",",")"))
           +1 "->" +d rans:appList(ran)("(",",",")") }
      *)
     FFIFUNTY of ffiAttributes option * ffiTy list * ffiTy list option * ffiTy list * loc
   | (*%
        @format(field fields * loc)
          fields:recordList(field)("{",",","}")
        @format:field(k * ty) { k ":" 2[ +1 ty ] }
      *)
     (*% @prefix formatWithType_
        @format(field fields * loc)
          fields:recordList(field)("{",",","}")
        @format:field(k * ty) { k ":" 2[ +1 ty ] }
      *)
     FFIRECORDTY of (RecordLabel.label * ffiTy) list * loc (* order has meaning *)
   | (*%
        @format(ty * loc) ty
      *)
     (*% @prefix formatWithType_
        @format(ty * loc) ty
      *)
     FFIBASETY of ty * loc

 (*%
   @formatter(bool) SmlppgUtil.formatBinaryChoice
   @formatter(enclosedList) SmlppgUtil.formatListWithEnclosure
   @formatter(prependedOpt) SmlppgUtil.formatPrependedOpt
   @formatter(enclosedListIfMoreThanOne)
             SmlppgUtil.formatListWithEnclosureIfMoreThanOne
   @formatter(formatListWithEnclosure) SmlppgUtil.formatListWithEnclosure
   @formatter(formatListWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
   @formatter(declList) TermFormat.formatDeclList
   @formatter(recordExp) TermFormat.formatRecordExp
   @formatter(tyBindInfo) T.format_tyBindInfo
   @formatter(format_pathdot) Path.format_pathWithDotend
   @formatter(funBindInfo) T.format_funBindInfo
   @formatter(sigBindInfo) T.format_sigBindInfo
   @formatter(format_bmap_int) T.format_bmap_int
   @formatter(optionalList) TermFormat.formatOptionalList
   @formatter(RecordLabel.label) RecordLabel.format_label
   @formatter(Types.constraint) Types.format_constraint
  *)
 (*% @prefix formatWithType_
   @formatter(bool) SmlppgUtil.formatBinaryChoice
   @formatter(enclosedList) SmlppgUtil.formatListWithEnclosure
   @formatter(prependedOpt) SmlppgUtil.formatPrependedOpt
   @formatter(enclosedListIfMoreThanOne)
             SmlppgUtil.formatListWithEnclosureIfMoreThanOne
   @formatter(formatListWithEnclosure) SmlppgUtil.formatListWithEnclosure
   @formatter(formatListWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
   @formatter(declList) TermFormat.formatDeclList
   @formatter(recordExp) TermFormat.formatRecordExp
   @formatter(tyBindInfo) T.format_tyBindInfo
   @formatter(format_pathdot) Path.format_pathWithDotend
   @formatter(funBindInfo) T.format_funBindInfo
   @formatter(sigBindInfo) T.format_sigBindInfo
   @formatter(format_bmap_int) T.format_bmap_int
   @formatter(optionalList) TermFormat.formatOptionalList
   @formatter(RecordLabel.label) RecordLabel.format_label
   @formatter(Types.constraint) Types.format_constraint
  *)
  datatype tpexp 
    = (*%  
         @format "?" 
       *)
      (*% @prefix formatWithType_
         @format "?" 
       *)
      TPERROR
    | (*%  
         @format({const, ty, loc}) 
           const
       *)
      (*% @prefix formatWithType_
         @format({const, ty, loc}) 1[const +1 ":" + ty]
       *)
      TPCONSTANT of {const:constant, ty:ty, loc:loc}
    | (*% 
         @format(var)  var
       *)
      (*% @prefix formatWithType_
         @format(var)  var
       *)
      TPVAR of varInfo
    | (*% 
         @format(var)  var
       *)
      (*% @prefix formatWithType_
         @format(var)  var
       *)
      (* extnernal variable imported through _require *)
      TPEXVAR of exVarInfo
    | (*% 
         @format({var, arity}) var
       *)
      (*% @prefix formatWithType_
         @format({var, arity}) var + "reffunvar"
       *)
      TPRECFUNVAR of {var:varInfo, arity:int}
    | (*%
         @format({argVarList:id:varInfo ids:enclosedListIfMoreThanOne,
                 bodyTy:ty, bodyExp:exp, loc:loc}) 
          "("
             "fn" + {ids(id)(","+1,"{","}")} +d "=>"
             1[
               +1
               exp
              ]
          ")"
       *)
      (*% @prefix formatWithType_
         @format({argVarList:id:varInfo ids:enclosedListIfMoreThanOne,
                 bodyTy:ty, bodyExp:exp, loc:loc}) 
          "("
             "fn" + {ids(id)(","+1,"{","}")} +d "=>"
             1[
               +1
               exp
               +1
               ":" ty
              ]
          ")"
       *)
      (* ty is the type of tpexp  *)
      TPFNM of {argVarList:varInfo list, bodyTy:ty, bodyExp:tpexp, loc:loc}
    | (*%
         @format({funExp:exp1,
                 funTy:ty,
                 argExpList:exp2 exps:enclosedListIfMoreThanOne,
                 loc:loc})
        "("
        1[
          1
          1[
            exp1
           ]
          +1
          exps(exp2)(",","{","}")
         ]
        1        
        ")"
      *)
      (*% @prefix formatWithType_
         @format({funExp:exp1,
                 funTy:ty,
                 argExpList:exp2 exps:enclosedListIfMoreThanOne,
                 loc:loc})
        "("
        1[
          1
          1[
            exp1
           ]
          +1
          exps(exp2)(",","{","}")
         ]
        1        
        ")"
      *)
      (* ty is the type of the function *) 
      TPAPPM of {funExp:tpexp, funTy:ty, argExpList:tpexp list, loc:loc}
    | (*%
         @format({con:con,
                  instTyList:ty tys:formatListWithEnclosure,
                  argExpOpt:exp opt, argTyOpt, loc:loc}) 
        1[
          con
          +d
          opt( exp )
          ]
        @format:exp(exp) 2[ +1 exp ]
      *)
      (*% @prefix formatWithType_
         @format({con:con,
                  instTyList:ty tys:formatListWithEnclosure,
                  argExpOpt:exp opt, argTyOpt, loc:loc}) 
        1[
          con
          +d
          opt( exp )
          ]
        @format:exp(exp) 2[ +1 exp ]
      *)
     (*
         @format({con:con,
                  instTyList:ty tys:formatListWithEnclosure,
                  argExpOpt:exp opt, argTyOpt, loc:loc}) 
      1[
        con
        +1
        "{" tys(ty)(",",,) "}"
        +d
        opt( exp )
        ]
        @format:exp(exp) 2[ +1 exp ]
      *)
      TPDATACONSTRUCT of 
      {
       con: conInfo,
       instTyList: ty list,
       argExpOpt: tpexp option,
       argTyOpt: ty option,
       loc: loc
      }
    | (*%
         @format({exn:exn,
                  instTyList:ty tys:formatListWithEnclosure,
                  argExpOpt:exp opt, argTyOpt, loc:loc}) 
          R1{
              exn !N0{tys(ty)(",","{","}")}
                  opt( exp )
            }
         @format:exp(exp) 2[ +1 exp ]
      *)
      (*% @prefix formatWithType_
         @format({exn:exn,
                  instTyList:ty tys:formatListWithEnclosure,
                  argExpOpt:exp opt, argTyOpt, loc:loc}) 
          R1{
              exn !N0{tys(ty)(",","{","}")}
                  opt( exp )
            }
         @format:exp(exp) 2[ +1 exp ]
      *)
      TPEXNCONSTRUCT of 
      {
       exn: exnCon,
       instTyList: ty list,
       argExpOpt: tpexp option,
       argTyOpt:ty option,
       loc: loc
      }
    | (*%
         @format({exnInfo, loc}) 
            "EXNCONSTRUCTOR(" exnInfo ")"
      *)
      (*% @prefix formatWithType_
         @format({exnInfo, loc}) 
            "EXNCONSTRUCTOR(" exnInfo ")"
      *)
      TPEXN_CONSTRUCTOR of 
      {
       exnInfo: exnInfo,
       loc: loc
      }
    | (*%
         @format({exExnInfo, loc}) 
            "External EXNCONSTRUCTOR(" exExnInfo ")"
      *)
      (*% @prefix formatWithType_
         @format({exExnInfo, loc}) 
            "External EXNCONSTRUCTOR(" exExnInfo ")"
      *)
      TPEXEXN_CONSTRUCTOR of 
      {
       exExnInfo: exExnInfo,
       loc: loc
      }
    | (*%
         @format({expList:exp exps:enclosedListIfMoreThanOne, 
                  expTyList:ty1 ty1s, 
                  ruleList:rule rules,
                  ruleBodyTy:ty2,
                  caseKind:caseKind,
                  loc:loc})
         caseKind
          1[
             +1 exps(exp)(",", "{","}")
           ]
          +1
          "of"
          1[
            +1
            rules(rule)(~1[ +1 "|"+ ])
           ]
       @format:rule({args:pat pats:enclosedListIfMoreThanOne, body:exp})
         pats(pat)(",","{","}")
         + "=>"
         +1
         exp
       *)
      (*% @prefix formatWithType_
         @format({expList:exp exps:enclosedListIfMoreThanOne, 
                  expTyList:ty1 ty1s, 
                  ruleList:rule rules,
                  ruleBodyTy:ty2,
                  caseKind:caseKind,
                  loc:loc})
         caseKind
          1[
             +1 exps(exp)(",", "{","}")
             +1 ":"
             "{" ty1s(ty1)(",") "}"
           ]
          +1
          "of"
          1[
            +1
            rules(rule)(~1[ +1 "|"+ ])
           ]
          +1
          ":" + ty2
       @format:rule({args:pat pats:enclosedListIfMoreThanOne, body:exp})
         pats(pat)(",","{","}")
         + "=>"
         +1
         exp
       *)
      TPCASEM of 
       {
        expList:tpexp list,
        expTyList:ty list,
        ruleList: {args:tppat list, body:tpexp} list,
        ruleBodyTy:ty,
        caseKind: caseKind,
        loc:loc
        }
    | (*%
       * @format ({groupListTerm, groupListTy, dynamicTerm, dynamicTy, elemTy, ruleBodyTy, loc})
         "_dynamicCase" +  dynamicTerm + "of" 
          1 "groupListTerm" + 2[ groupListTerm ] 
          1 "groupListTy" + 2[ groupListTy ] 
          1 "elemTy" + 2[ elemTy]
          1 "ruleBodyTy" + 2[ ruleBodyTy]
          1 "end" 
       *)
      (*% @prefix formatWithType_
       * @format ({groupListTerm, groupListTy, dynamicTerm, dynamicTy, elemTy, ruleBodyTy, loc})
         "_dynamicCase" +  dynamicTerm + "of" 
          1 "groupListTerm" + 2[ groupListTerm ] 
          1 "groupListTy" + 2[ groupListTy ] 
          1 "elemTy" + 2[ elemTy]
          1 "ruleBodyTy" + 2[ ruleBodyTy]
          1 "end" 
       *)
      TPDYNAMICCASE of 
       {
        groupListTerm : tpexp,
        groupListTy : ty,
        dynamicTerm :  tpexp,
        dynamicTy :  ty,
        elemTy : ty, 
        ruleBodyTy : ty,
        loc:loc
        }
    | (*%
       @format({primOp:prim,
                instTyList:ty tys:formatListWithEnclosure,
                argExp:exp,
                argTy:ty,
                loc:loc})
          prim exp
     *)
      (*% @prefix formatWithType_
       @format({primOp:prim,
                instTyList:ty tys:formatListWithEnclosure,
                argExp:exp,
                argTy:ty,
                loc:loc})
         1[
           prim
            +d
           !N0{tys(ty)(",","{","}")}
            +d
           exp
          ]
       @format:exp(exp) 2[ +1 exp ]
     *)
      TPPRIMAPPLY of 
      {
       primOp: primInfo, 
       instTyList: ty list, 
       argExp: tpexp,
       argTy:ty,
       loc: loc
      }
    | (*%
       @format({oprimOp:oprim,
                instTyList:ty tys:formatListWithEnclosure,
                argExp:exp,
                argTy:ty,
                loc:loc})
           oprim exp
       *)
      (*% @prefix formatWithType_
       @format({oprimOp:oprim,
                instTyList:ty tys:formatListWithEnclosure,
                argExp:exp,
                argTy:ty,
                loc:loc})
       R1{
           oprim !N0{tys(ty)(",","{","}")}
            exp
         }
       @format:exp(exp) 2[ +1 exp ]
       *)
      TPOPRIMAPPLY of 
      {
       oprimOp: oprimInfo,
       instTyList: ty list,
       argExp: tpexp, 
       argTy:ty,
       loc: loc
      }
    | (*%
       * @format({fields:records, recordTy:ty, loc:loc})
        1[
           records
         ]
       *)
      (*% @prefix formatWithType_
       * @format({fields:records, recordTy:ty, loc:loc})
        1[
           records
           +1 ":" ty
         ]
       *)
      TPRECORD of {fields:fields, recordTy:ty, loc:loc}
    | (*%
       @format({label:selector, exp:exp, expTy:ty, resultTy, loc:loc})
        L10{ "(""#"{selector} 
              + {exp}
              ")" 
           }
       *)
      (*% @prefix formatWithType_
       @format({label:selector, exp:exp, expTy:ty, resultTy, loc:loc})
        L10{ "(""#"{selector} + "("{exp 2[ +1 ":" ty ]}")"")"
              2[ +1 ":" resultTy ] }
       *)
      TPSELECT of {label:RecordLabel.label, exp:tpexp, expTy:ty, resultTy:ty, loc:loc}
    | (*%
          @format({label:label, 
                   recordExp:exp1, 
                   recordTy:ty1, 
                   elementExp:exp2, 
                   elementTy:y2, 
                   loc:loc})
           N0{
              "MODIFY(" exp1 "," +1 label "," +1 exp2 ")"
             }
      *)
      (*% @prefix formatWithType_
          @format({label:label, 
                   recordExp:exp1, 
                   recordTy:ty1, 
                   elementExp:exp2, 
                   elementTy:y2, 
                   loc:loc})
           N0{
              "MODIFY(" exp1 "," +1 label "," +1 exp2 ")"
               2[ +1 ":" ty1
                ]
             }
      *)
      TPMODIFY of 
      {
       label: RecordLabel.label,
       recordExp: tpexp, 
       recordTy: ty, 
       elementExp: tpexp, 
       elementTy: ty, 
       loc: loc
       }
    | (*%
         @format({expList:exp exps,
                  expTyList:ty tys:formatListWithEnclosure, loc:loc})
         exps(exp)(";" +1)
     *)
      (*% @prefix formatWithType_
         @format({expList:exp exps,
                  expTyList:ty tys:formatListWithEnclosure, loc:loc})
          !N0{
              "("
                2[ 1 exps(exp)(";" +2) ] 1
              ")" 
              2[ +1 ":" tys(ty)(",","(",")") ]
             }
     *)
      TPSEQ of {expList:tpexp list, expTyList:ty list, loc:loc}
    | (*%
       * @format({binds:bind binds, bodyExp:exp, loc:loc})
            1[
               "bind" 2[ +1 binds(bind)( +1) ]  +1
               "in" 2[ +2 exp ] +1
               "end"
             ]
         @format:bind(id:varInfo * exp)
            id +d "=" 2[ +2 {exp} ]
       *)
      (*% @prefix formatWithType_
       * @format({binds:bind binds, bodyExp:exp, loc:loc})
       * !N0{
       *      {"bind" 2[ +1 binds(bind)( +1) ]}  +1
       *      {"in" 2[ +2 exp ] +2 "end"}
       *    }
       * @format:bind(id:varInfo * exp)
       * { id +d "=" 2[ +2 {exp} ] }
       *)
      TPMONOLET of {binds:(varInfo * tpexp) list, bodyExp:tpexp, loc:loc}
    | (*%
       * @format({decls:dec decs,
                  body:exp exps,
                  tys:ty tys:formatListWithEnclosure,
                  loc:loc})
         "let"
           1[ 
              +1 decs(dec)( +1)
            ] 
         +1
         "in"
           1[
             +1 exps(exp)( +1 )
            ]
         +1
         "end"
       *)
      (*% @prefix formatWithType_
       * @format({decls:dec decs,
                  body:exp exps,
                  tys:ty tys:formatListWithEnclosure,
                  loc:loc})
         "let"
           1[ 
              +1 decs(dec)( +1)
            ] 
         +1
         "in"
           1[
             +1 exps(exp)( +3 )
             +d
             ":"
             + tys(ty)(",","{","}")
            ]
         +1
         "end"
       *)
      TPLET of {decls:tpdecl list, body:tpexp list, tys:ty list, loc:loc}
    | (*%
       * @format({exp, ty, loc})
       * N0{ "raise" +d {exp}  }
       *)
      (*% @prefix formatWithType_
       * @format({exp, ty, loc})
       * N0{ "raise" +d {exp} 2[ +1 ":" ty ] }
       *)
      TPRAISE of {exp:tpexp, ty:ty, loc:loc}
    | (*%
        @format({exp:exp1, exnVar:id:varInfo, handler:exp2, resultTy, loc:loc})
        "handle"
         1[
          +1
          exp1
         ]
        +1
        "with" 
         1[
           +1
           1[
             "fn" + id + "=>"
             +1
             exp2
           ]
         ]
       *)
      (*% @prefix formatWithType_
        @format({exp:exp1, exnVar:id:varInfo, handler:exp2, resultTy, loc:loc})
        "handle"
         1[
          +1
          exp1
         ]
        +1
        "with" 
         1[
           +1
           1[
             "fn" + id + "=>"
             +1
             exp2
           ]
         ]
       *)
       (*
        * handle (exp1, x, exp2) 
           exp1 the expression to be evaluated normally
              x variable to received exception value 
           exp2 the handler body using x 
       *)
      TPHANDLE of {exp:tpexp, exnVar:varInfo, handler:tpexp, resultTy:ty,
                   loc:loc}
    | (*%
         @format({btvEnv:btv,
                  constraints,
                  argVarList:var:varInfo vars, 
                  bodyTy:ty, 
                  bodyExp:exp, 
                  loc:loc})
        "["
          1[
            1
            btv "."
            1[
              +1
              "fn" + "{" {vars(var)(",")}
                      "}" +d "=>"
              1[ +1
                 1[exp
                  ]
               ]
             ]
           ]
         1
        "]"
      *)
      (*% @prefix formatWithType_
         @format({btvEnv:btv,
                  constraints,
                  argVarList:var:varInfo vars, 
                  bodyTy:ty, 
                  bodyExp:exp, 
                  loc:loc})
        "["
          1[
            1
            btv "."
            1[
              +1
              "fn" + "{" {vars(var)(",")}
                      "}" +d "=>"
              1[ +1
                 1[exp
                   +1 ":" ty
                  ]
               ]
             ]
           ]
         1
        "]"
      *)
      (*
        \forall t.\fn x => e 
        ty is the type of the function without type abstraction
      *)
      TPPOLYFNM of 
       {
        btvEnv : btvEnv,
        constraints : Types.constraint list,
        argVarList : varInfo list,
        bodyTy: ty,
        bodyExp : tpexp,
        loc : loc
        }
    | (*%
       @format({btvEnv:btv, constraints, expTyWithoutTAbs:ty, exp:exp, loc:loc})
        "["
          1[
            1
            btv "."
            +2
            1[ exp
             ]
           ]
          1
         "]"
      *)
      (*% @prefix formatWithType_
       @format({btvEnv:btv, constraints, expTyWithoutTAbs:ty, exp:exp, loc:loc})
        "["
          1[
            1
            btv "."
            +2
            1[ exp
               +1 ":" ty
             ]
           ]
          1
         "]"
      *)
     (* \forall t.e;  ty is the type of tpexp without type abstraction *)
      TPPOLY of
      {
        btvEnv: btvEnv,
        constraints : Types.constraint list,
        expTyWithoutTAbs: ty,
        exp : tpexp,
        loc : loc
      }
    | (*%
       @format({exp:exp, expTy:ty1, instTyList:ty2 tys, loc:loc}) 
          exp
      *)
      (*% @prefix formatWithType_
       @format({exp:exp, expTy:ty1, instTyList:ty2 tys, loc:loc}) 
        1[
          exp
          1[
            +1 ":" 
            ty1
            +1
            "{"
              1[tys(ty2)("," +d)]
            "}"
           ]
         ]
      *)
      (* TPTAPP(ex,ty1,tyl) : ty1 is the polytype, tyl are type args *)
      TPTAPP of {exp:tpexp, expTy:ty, instTyList:ty list, loc:loc}
    | (*%
         @format ({funExp, ffiTy, stubTy, loc})
         L10{ "FFI(" funExp ")" }
      *)
      (*% @prefix formatWithType_
         @format ({funExp, ffiTy, stubTy, loc})
         L10{ "FFI(" funExp +d ":" +1 ffiTy ")" }
      *)
      TPFFIIMPORT of
        {
          funExp : tpffifun,
          ffiTy : ffiTy,
          stubTy : ty,
          loc : loc
        }
    | (*%
         @format((exp * expTy) * ty * loc)
          "cast(" exp ")"
       *)
      (*% @prefix formatWithType_
         @format((exp * expTy) * ty * loc)
          "cast(" exp + "to" + ty ")"
       *)
      (* cast e to some type ty; used to coerce con type to a record type *)
      TPCAST of (tpexp * ty) * ty * loc
    | (*%
        @format(ty * loc)
        "_sizeof(" ty ")"
       *)
      (*% @prefix formatWithType_
        @format(ty * loc)
        "_sizeof(" ty ")"
       *)
      TPSIZEOF of ty * loc
   |  (*%
        @format({isJoin, ty,args:(arg1 * arg2),argtys,loc})
        isJoin()("_join(","_extend(") arg1 "," arg2 ")"
       *)
      (*% @prefix formatWithType_
        @format({isJoin, ty,args:(arg1 * arg2),argtys:(argty1 * argty2),loc})
        isJoin()("_join(","_extend(") arg1 ":"  argty1 "," arg2 ":" argty2 ") :" ty
       *)
      TPJOIN of
        {
          ty : ty,
          args : tpexp * tpexp,
          argtys: ty * ty,
          isJoin:bool,
          loc : loc
        }
    | (*%
        @format({exp,ty,elemTy, coerceTy,loc})
        "_dynamic " exp ":" ty " as " coerceTy
       *)
      (*% @prefix formatWithType_
        @format({exp,ty,elemTy, coerceTy,loc})
        "_dynamic " exp " as " coerceTy
       *)
      TPDYNAMIC of {exp:tpexp, ty:ty, elemTy:ty, coerceTy:ty, loc:loc}
    | (*%
        @format({exp,ty,elemTy, coerceTy,loc})
        "_dynamic " exp ":" ty " is " coerceTy
       *)
      (*% @prefix formatWithType_
        @format({exp,ty,elemTy, coerceTy,loc})
        "_dynamic " exp " is " coerceTy
       *)
      TPDYNAMICIS of {exp:tpexp, ty:ty, elemTy:ty, coerceTy:ty, loc:loc}
    | (*%
        @format({exp,ty,elemTy, coerceTy,loc})
        "_dynamicview " exp ":" ty " as " coerceTy
       *)
      (*% @prefix formatWithType_
        @format({exp,ty,elemTy, coerceTy,loc})
        "_dynamicview " exp " as " coerceTy
       *)
      TPDYNAMICVIEW of {exp:tpexp, ty:ty, elemTy:ty, coerceTy:ty, loc:loc}
    | (*%
        @format({ty, coerceTy,loc})
        "_dynamicnull as " ty
       *)
      (*% @prefix formatWithType_
        @format({ty,coerceTy,loc})
        "_dynamicnull as " ty + ":" + coerceTy
       *)
      TPDYNAMICNULL of {ty:ty, coerceTy:ty, loc:loc}
    | (*%
        @format({ty, coerceTy,loc})
        "_dynamictop as " ty
       *)
      (*% @prefix formatWithType_
        @format({ty,coerceTy,loc})
        "_dynamictop as " ty + ":" + coerceTy
       *)
      TPDYNAMICTOP of {ty:ty, coerceTy:ty, loc:loc}
    | (*%
        @format(ty * loc)
        "_reifyty(" ty ")"
       *)
      (*% @prefix formatWithType_
        @format(ty * loc)
        "_reifyty(" ty ")"
       *)
      TPREIFYTY of ty * loc

 and tpffifun
   = (*% @format(x * ty) x *)
     (*% @prefix formatWithType_ @format(x * ty) x *)
     TPFFIFUN of tpexp * ty
   | (*% @format(x) x *)
     (*% @prefix formatWithType_ @format(x) x *)
     TPFFIEXTERN of string

 and tpdecl 
   = (*%
       @format(bind binds * loc) 
        1[
            "val" + binds(bind)(~1[ +1 "and"] +)
         ]
       @format:bind(var * exp)
         var +d "=" +1 exp
      *)
     (*% @prefix formatWithType_
       @format(bind binds * loc) 
        1[
            "val" + binds(bind)(~1[ +1 "and"] +)
         ]
       @format:bind(var * exp)
        var +d "=" +1 exp
      *)
     TPVAL of (varInfo * tpexp) list * loc
   | (*%
       @format(dec binds * loc)
         1[
            "fun" + binds(dec)(~1[ +1 "and"] +)
          ]
        @format:dec({funVarInfo,argTyList:ty tys,bodyTy,ruleList:rules})
           1[funVarInfo + rules]
        @format:rules(rule rules)
           rules(rule)(~1[ +1"|"] +)
        @format:rule({args:pat pats, body:exp})
           pats(pat)(+d) +d "=" +1 exp
      *)
     (*% @prefix formatWithType_
       @format(dec binds * loc)
         1[
            "fun" + binds(dec)(~1[ +1 "and"] +)
          ]
        @format:dec({funVarInfo,argTyList:ty tys,bodyTy,ruleList:rules})
           1[funVarInfo + rules]
        @format:rules(rule rules)
           rules(rule)(~1[ +1"|"] +)
        @format:rule({args:pat pats, body:exp})
           pats(pat)(+d) +d "=" +1 exp
      *)
     TPFUNDECL of {
                    funVarInfo: varInfo, 
                    argTyList: ty list,
                    bodyTy: ty,
                    ruleList : {args:tppat list, body:tpexp} list
                   } list
                   *
                   loc
   | (*%
       * @format({btvEnv:btv, constraints, recbinds: dec binds, loc})
       1[
          "fun"
          + "(" btv ")"
          +d binds(dec)(~1[ +1 "and"] +)
        ]
        @format:dec({funVarInfo, argTyList, bodyTy, ruleList:rule rules})
         2[
           +1
           funVarInfo
           +1
           rules(rule)(~2[+1"|"])
           + funVarInfo
          ]
        @format:rule({args:pat pats, body:exp})
         1[
            pats(pat)(+d)
            + "=" +1 exp
          ]
       *)
     (*% @prefix formatWithType_
       * @format({btvEnv:btv, constraints, recbinds: dec binds, loc})
       1[
          "fun"
          + "(" btv ")"
          +d binds(dec)(~1[ +1 "and"] +)
        ]
        @format:dec({funVarInfo, argTyList, bodyTy, ruleList:rule rules})
         2[
           +1
           funVarInfo
           +1
           rules(rule)(~2[+1"|"]
                       + funVarInfo +1)
          ]
        @format:rule({args:pat pats, body:exp})
         1[
            pats(pat)(+d)
            + "=" +1 exp
          ]
       *)
     TPPOLYFUNDECL of
     {
       btvEnv : btvEnv,
       constraints : Types.constraint list,
       recbinds : {funVarInfo: varInfo,
                   argTyList: ty list,
                   bodyTy: ty,
                   ruleList : {args:tppat list, body:tpexp} list
                  } list,
       loc : loc
     }
   | (*%
       @format(bind binds * loc)
       1[
         "val rec"
          +d
          binds(bind)(~1[ +1 "and"] +)
        ]
       @format:bind({var, expTy:ty1, exp:exp}) 
        1[ 
           var +d "=" 
           +1 exp
         ]
      *)
     (*% @prefix formatWithType_
       @format(bind binds * loc)
       1[
         "val rec"
          +d
          binds(bind)(~1[ +1 "and"] +)
        ]
       @format:bind({var, expTy:ty1, exp:exp}) 
        1[ 
           var +d "="
           +1 exp
         ]
      *)
     TPVALREC of {var:varInfo, expTy:ty, exp:tpexp } list * loc
   | (*%
       @format({btvEnv:btv, constraints, recbinds: bind binds, loc})
         "valpolyrec["
             2[ 1
                 btv "." +2
                 "val rec" +d {binds(bind)(~4[ +1 "and"] +)}
              ] 1
         "]"
       @format:bind({var, expTy:ty1, exp:exp})
         var +d "=" +2
         2[ exp ]
      *)
     (*% @prefix formatWithType_
       @format({btvEnv:btv, constraints, recbinds: bind binds, loc})
         "valpolyrec["
             2[ 1
                 btv "." +2
                 "val rec" +d {binds(bind)(~4[ +1 "and"] +)}
              ] 1
         "]"
       @format:bind({var, expTy:ty1, exp:exp})
         var +d "=" +2
         2[ exp ]
      *)
     TPVALPOLYREC of
     {
       btvEnv : btvEnv,
       constraints : Types.constraint list,
       recbinds : {var:varInfo, expTy:ty, exp:tpexp} list,
       loc : loc
     }
   | (*%
         @format(bind binds * loc)
          binds:optionalList(bind)("exception" +d, +1 "and",)
         @format:bind({exnInfo, loc}) exnInfo
       *)
     (*% @prefix formatWithType_
         @format(bind binds * loc)
          binds:optionalList(bind)("exception" +d, +1 "and",)
         @format:bind({exnInfo, loc}) exnInfo
       *)
      TPEXD of {exnInfo: exnInfo, loc: loc} list * loc
   | (*%
         @format({exnInfo, varInfo} * loc)
            "exception tag" +d exnInfo +d "=" +d varInfo
       *)
     (*% @prefix formatWithType_
         @format({exnInfo, varInfo} * loc)
            "exception tag" +d exnInfo +d "=" +d varInfo
       *)
      TPEXNTAGD of {exnInfo: exnInfo, varInfo:varInfo} * loc
    | (*%
         @format({var, arity})
         "export" +d "rec fun var" + var
       *)
      (*% @prefix formatWithType_
         @format({var, arity})
         "export" +d "rec fun var" +  var
       *)
      (* This is changed to TPEXPORT in uncurry optimization *)
      TPEXPORTRECFUNVAR of {var:varInfo, arity:int}
    | (*%
         @format(var)
         "export" + var
       *)
      (*% @prefix formatWithType_
         @format(var)
         "export" + var
       *)
      (* This is changed to TPEXPORT in uncurry optimization *)
      TPEXPORTVAR of varInfo
    | (*%
         @format(exn)
         "export" +d "exception" + exn
       *)
      (*% @prefix formatWithType_
         @format(exn)
         "export" +d "exception" + exn
       *)
     (* export exception declaration specified in  _interface *)
      TPEXPORTEXN of exnInfo
    | (*%
        @format({path, ty} * provider)
         "extern" + "var" + path
       *)
      (*% @prefix formatWithType_
        @format({path, ty} * provider)
         2["extern" + "var" + path +1 ":" + ty]
       *)
     (* temporary disable extern printint
         "extern" + "var" + path
       formatWithType_
         2["extern" + "var" + path +1 ":" + ty]
      *)
      TPEXTERNVAR of {path:longsymbol, ty:ty} * Types.provider
    | (*%
        @format({path, ty:ty} * provider)
         "extern" + "exception" + path
       *)
      (*% @prefix formatWithType_
        @format({path, ty:ty} * provider)
         "extern" + "exception" + path + ":" + ty
       *)
     (* temporary disable extern printint
         "extern" + "exception" + path
       formatWithType_
         "extern" + "exception" + path + ":" + ty
      *)
     (* import exception declaration specified in  _interface *)
      TPEXTERNEXN of {path:longsymbol, ty:ty} * Types.provider
    | (*%
        @format({path, ty})
         "builtin" + "exception" + path
       *)
      (*% @prefix formatWithType_
        @format({path, ty})
          "builtin" + "exception" + path
       *)
     (* builtin exception definition *)
      TPBUILTINEXN of {path:longsymbol, ty:ty}

 and tppat
   = (*% 
        @format(v * loc) "?"
      *)
     (*% @prefix formatWithType_
        @format(v * loc) "?"
      *)
     TPPATERROR of ty * loc
   | (*% 
        @format(v) "_"
      *)
     (*% @prefix formatWithType_
        @format(v) "_"
      *)
     TPPATWILD of ty * loc
   | (*% 
        @format(var) var
      *)
     (*% @prefix formatWithType_
        @format(var) var
      *)
     TPPATVAR of varInfo
   | (*%
        @format(const * ty * loc) const
      *)
     (*% @prefix formatWithType_
        @format(const * ty * loc) const
      *)
     TPPATCONSTANT of constant * ty * loc
   | (*%
      * @format({conPat:con,
                 instTyList:ty1 tys:formatListWithEnclosure, 
                 argPatOpt:pat opt, 
                 patTy:ty2, 
                 loc:loc}) 
       1[
         d con + opt(pat)
        ]
      *)
     (*% @prefix formatWithType_
      * @format({conPat:con,
                 instTyList:ty1 tys:formatListWithEnclosure, 
                 argPatOpt:pat opt, 
                 patTy:ty2, 
                 loc:loc}) 
       1[
         d con + opt(pat)
        ]
      *)
    (*
      * @format({conPat:con,
                 instTyList:ty1 tys:formatListWithEnclosure, 
                 argPatOpt:pat opt, 
                 patTy:ty2, 
                 loc:loc}) 
       1[
        d con tys(ty1)(",","{","}") + opt(pat)
        +1
        ":" ty2
        ]
      *)
     TPPATDATACONSTRUCT of 
       {
        conPat: conInfo, 
        instTyList: ty list, 
        argPatOpt: tppat option, 
        patTy: ty, 
        loc: loc
        }
   | (*%
      * @format({exnPat:con, 
                 instTyList:ty1 tys:formatListWithEnclosure, 
                 argPatOpt:pat opt, 
                 patTy:ty2, 
                 loc:loc}) 
        1[
          d con tys(ty1)(",","{","}") +
          opt(pat)
         ]
      *)
     (*% @prefix formatWithType_
      * @format({exnPat:con, 
                 instTyList:ty1 tys:formatListWithEnclosure, 
                 argPatOpt:pat opt, 
                 patTy:ty2, 
                 loc:loc}) 
        1[
          d con tys(ty1)(",","{","}") +
          opt(pat) +1
          ":" ty2
         ]
      *)
     TPPATEXNCONSTRUCT of 
       {
        exnPat:exnCon, 
        instTyList:ty list, 
        argPatOpt:tppat option, 
        patTy:ty, 
        loc:loc
        }
   | (*%
         @format({fields:record, recordTy:ty, loc:loc})
         1[
            record
          ]
      *)
     (*% @prefix formatWithType_
         @format({fields:record, recordTy:ty, loc:loc})
         1[
            record
          ]
      *)
     (*
         @format({fields:record, recordTy:ty, loc:loc})
         1[
            record
            +1
            ":"
            ty
          ]
      *)
     TPPATRECORD of {fields:patfields, recordTy:ty, loc:loc}
   | (*%
         @format({varPat:pat1, asPat:pat2, loc:loc})
         pat1 + "as" + pat2
      *)
     (*% @prefix formatWithType_
         @format({varPat:pat1, asPat:pat2, loc:loc})
         pat1 + "as" + pat2
      *)
     TPPATLAYERED of {varPat:tppat, asPat:tppat, loc:loc}

 withtype fields = 
     (*%
      * @format(exp smap:recordExp)
        smap(exp)
      *)
     (*% @prefix formatWithType_
      * @format(exp smap:recordExp)
        smap(exp)
      *)
     tpexp RecordLabel.Map.map

 and patfields = 
     (*%
      * @format(pat smap:recordExp)
        1[
           smap(pat)
         ]
      *)
     (*% @prefix formatWithType_
      * @format(pat smap:recordExp)
        1[
           smap(pat)
         ]
      *)
     tppat RecordLabel.Map.map

  fun tppatToLoc tppat =
      case tppat of 
        TPPATERROR (ty, loc) => loc
      | TPPATWILD (ty, loc) => loc
      | TPPATVAR varInfo => Symbol.longsymbolToLoc (#path varInfo)
      | TPPATCONSTANT (constant, ty, loc) => loc
      | TPPATDATACONSTRUCT {loc, ...} => loc
      | TPPATEXNCONSTRUCT {loc, ...} => loc
      | TPPATRECORD {loc, ...} => loc
      | TPPATLAYERED {loc, ...} => loc
end
