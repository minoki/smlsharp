_require local "../../../../basis.smi"
(* _require local "../../../../smlformat-lib.smi" *)

_require "../../../libs/ids/main/LocalID.smi"
_require local "../../../libs/env/main/SEnv.smi"
_require "../../../compilerIRs/recordcalc/main/RecordCalc.ppg.smi"
_require "../../../data/types/main/Types.ppg.smi"
_require "../../../data/symbols/main/Loc.smi"
_require "../../../data/symbols/main/RecordLabel.smi"

_require local "../../userlevelprimitive/main/UserLevelPrimitive.smi"
_require local "../../debug/main/Bug.smi"

(* _require local "./TyToReifiedTy.smi" *)
_require local "./ReifyUtils.smi"
_require local "./ReifiedTyData.smi"

_require "./ReifiedTy.ppg.smi"

structure ReifyTy =
struct
  val ReifiedTy : Loc.loc -> ReifiedTy.reifiedTy -> {exp:RecordCalc.rcexp, ty:Types.ty}
  val ReifiedTyWithLookUp 
      : (BoundTypeVarID.id -> RecordCalc.varInfo option) -> Loc.loc -> ReifiedTy.reifiedTy -> {exp:RecordCalc.rcexp, ty:Types.ty}
  val TyRep  : Loc.loc -> ReifiedTy.tyRep -> {exp:RecordCalc.rcexp, ty:Types.ty}
  val TyRepWithLookUp
      : (BoundTypeVarID.id -> RecordCalc.varInfo option) -> Loc.loc -> ReifiedTy.tyRep -> {exp:RecordCalc.rcexp, ty:Types.ty}
  val RecordTy : Loc.loc -> ReifiedTy.reifiedTy RecordLabel.Map.map -> {exp:RecordCalc.rcexp, ty:Types.ty} 
end
