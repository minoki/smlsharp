_require "../../basis.smi"
_require "./SQLBackendTy.smi"
_require "./Backend.smi"
_require local "../../smlformat-lib.smi"
_require local "./SQLErrors.smi"
_require "./builtintypes/timestamp/TimeStamp.smi"
_require "./SQLQuery.ppg.smi"
_require "./Numeric.smi"

structure SMLSharp_SQL_Prim =
struct

  structure Ty = SMLSharp_SQL_BackendTy
  structure Ast = SMLSharp_SQL_Query
  structure List = List
  structure Option = Option
  structure Bool = Bool
  structure Numeric = SMLSharp_SQL_Numeric

  datatype bool3 = True | False | Unknown
  type timestamp = SMLSharp_SQL_TimeStamp.timestamp
  type numeric = Numeric.num
  type decimal = numeric

  type backend = SMLSharp_SQL_Backend.backend
  type 'a server (= boxed)
  type 'a conn (= boxed)
  type 'a cursor (= boxed)
  type res (= boxed)
  exception Toy

  datatype ('toy, 'w) exp =
      EXPty of 'w Ast.exp_ast * 'toy
  datatype ('toy, 'w) whr =
      WHRty of 'w Ast.whr_ast * 'toy
  datatype ('toy, 'w) from =
      FROMty of 'w Ast.from_ast * ({} -> 'toy)
  datatype ('toy, 'w) orderby =
      ORDERBYty of 'w Ast.orderby_ast * 'toy
  datatype ('toy, 'w) offset =
      OFFSETty of 'w Ast.limit_ast * 'toy
  datatype ('toy, 'w) limit =
      LIMITty of 'w Ast.limit_ast * 'toy
  datatype ('src, 'toy, 'w) select =
      SELECTty of 'w Ast.select_ast * ('src -> 'toy) * (res -> 'toy)
  datatype ('toy, 'w) query =
      QUERYty of 'w Ast.query_ast * ({} -> 'toy) * (res -> 'toy)
  datatype ('toy, 'w) command =
      COMMANDty of 'w Ast.command_ast * ({} -> 'toy) * (res -> 'toy)
  datatype ('toy, 'w) db =
      DBty of 'w Ast.db * (unit -> 'toy)

  val closeRes : res -> unit

  val queryCommand : ('a list,'w) query -> ('a cursor,'w) command

  val sqlserver_string : string * (Ty.schema * (unit -> 'a)) -> 'a server
  val sqlserver_backend : backend * (Ty.schema * (unit -> 'a)) -> 'a server
  val sqlserver =
      case 'a in 'a * (Ty.schema * (unit -> 'b)) -> 'b server of
        string => sqlserver_string
      | backend => sqlserver_backend

  val sqleval : (('a,'w) db -> ('b,'w) command) -> 'a conn -> 'b

  val connect : 'a server -> 'a conn
  val closeConn : 'a conn -> unit
  val closeCursor : 'a cursor -> unit
  val fetch : 'a cursor -> 'a option
  val fetchAll : 'a cursor -> 'a list

  val toy : (('a,'w) db -> ('b,'w) query) -> 'a -> 'b
  val commandToString : (('a,'w) db -> ('b,'w) command) -> string
  val queryToString : (('a,'w) db -> ('b,'w) query) -> string
  val expToString : ('a,'w) exp -> string

  val fromSQL_int : res * int -> int
  val fromSQL_intInf : res * int -> intInf
  val fromSQL_word : res * int -> word
  val fromSQL_char : res * int -> char
  val fromSQL_bool : res * int -> bool
  val fromSQL_string : res * int -> string
  val fromSQL_real : res * int -> real
  val fromSQL_real32 : res * int -> real32
  val fromSQL_timestamp : res * int -> timestamp
  val fromSQL_numeric : res * int -> numeric
  val fromSQL_intOption : res * int -> int option
  val fromSQL_intInfOption : res * int -> intInf option
  val fromSQL_wordOption : res * int -> word option
  val fromSQL_charOption : res * int -> char option
  val fromSQL_boolOption : res * int -> bool option
  val fromSQL_stringOption : res * int -> string option
  val fromSQL_realOption : res * int -> real option
  val fromSQL_real32Option : res * int -> real32 option
  val fromSQL_timestampOption : res * int -> timestamp option
  val fromSQL_numericOption : res * int -> numeric option
  val fromSQL =
      case 'a in res * int -> 'a of
        int => fromSQL_int
      | intInf => fromSQL_intInf
      | word => fromSQL_word
      | char => fromSQL_char
      | bool => fromSQL_bool
      | string => fromSQL_string
      | real => fromSQL_real
      | real32 => fromSQL_real32
      | timestamp => fromSQL_timestamp
      | numeric => fromSQL_numeric
      | 'b option =>
        case 'b in res * int -> 'b option of
          int => fromSQL_intOption
        | intInf => fromSQL_intInfOption
        | word => fromSQL_wordOption
        | char => fromSQL_charOption
        | bool => fromSQL_boolOption
        | string => fromSQL_stringOption
        | real => fromSQL_realOption
        | real32 => fromSQL_real32Option
        | timestamp => fromSQL_timestampOption
        | numeric => fromSQL_numericOption

  val toyServer : unit -> 'a

  val ty_int : (unit -> int) -> Ty.schema_column
  val ty_intInf : (unit -> intInf) -> Ty.schema_column
  val ty_word : (unit -> word) -> Ty.schema_column
  val ty_char : (unit -> char) -> Ty.schema_column
  val ty_bool : (unit -> bool) -> Ty.schema_column
  val ty_string : (unit -> string) -> Ty.schema_column
  val ty_real : (unit -> real) -> Ty.schema_column
  val ty_real32 : (unit -> real32) -> Ty.schema_column
  val ty_timestamp : (unit -> timestamp) -> Ty.schema_column
  val ty_numeric : (unit -> numeric) -> Ty.schema_column
  val ty_intOption : (unit -> int option) -> Ty.schema_column
  val ty_intInfOption : (unit -> intInf option) -> Ty.schema_column
  val ty_wordOption : (unit -> word option) -> Ty.schema_column
  val ty_charOption : (unit -> char option) -> Ty.schema_column
  val ty_boolOption : (unit -> bool option) -> Ty.schema_column
  val ty_stringOption : (unit -> string option) -> Ty.schema_column
  val ty_realOption : (unit -> real option) -> Ty.schema_column
  val ty_real32Option : (unit -> real32 option) -> Ty.schema_column
  val ty_timestampOption : (unit -> timestamp option) -> Ty.schema_column
  val ty_numericOption : (unit -> numeric option) -> Ty.schema_column

  val ty =
      case 'a in (unit -> 'a) -> Ty.schema_column of
        int => ty_int
      | intInf => ty_intInf
      | word => ty_word
      | char => ty_char
      | bool => ty_bool
      | string => ty_string
      | real => ty_real
      | real32 => ty_real32
      | timestamp => ty_timestamp
      | numeric => ty_numeric
      | 'b option =>
        case 'b in (unit -> 'b option) -> Ty.schema_column of
          int => ty_intOption
        | intInf => ty_intInfOption
        | word => ty_wordOption
        | char => ty_charOption
        | bool => ty_boolOption
        | string => ty_stringOption
        | real => ty_realOption
        | real32 => ty_real32Option
        | timestamp => ty_timestampOption
        | numeric => ty_numericOption

  val compare_int = Int.compare
  val compare_intInf = IntInf.compare
  val compare_word = Word.compare
  val compare_char = Char.compare
  val compare_bool : bool * bool -> order
  val compare_string = String.compare
  val compare_real = Real.compare
  val compare_real32 = Real32.compare
  val compare_timestamp = SMLSharp_SQL_TimeStamp.compare
  val compare_numeric = SMLSharp_SQL_Numeric.compare
  val compare_intOption : int option * int option -> order
  val compare_intInfOption : intInf option * intInf option -> order
  val compare_wordOption : word option * word option -> order
  val compare_charOption : char option * char option -> order
  val compare_boolOption : bool option * bool option -> order
  val compare_stringOption : string option * string option -> order
  val compare_realOption : real option * real option -> order
  val compare_real32Option : real32 option * real32 option -> order
  val compare_timestampOption : timestamp option * timestamp option -> order
  val compare_numericOption : numeric option * numeric option -> order

  val compare =
      case 'a in 'a * 'a -> order of
        int => compare_int
      | intInf => compare_intInf
      | word => compare_word
      | char => compare_char
      | bool => compare_bool
      | string => compare_string
      | real => compare_real
      | real32 => compare_real32
      | timestamp => compare_timestamp
      | numeric => compare_numeric
      | 'b option =>
        case 'b in 'b option * 'b option -> order of
          int => compare_intOption
        | intInf => compare_intInfOption
        | word => compare_wordOption
        | char => compare_charOption
        | bool => compare_boolOption
        | string => compare_stringOption
        | real => compare_realOption
        | Real32.real => compare_real32Option
        | timestamp => compare_timestampOption
        | numeric => compare_numericOption

  structure General2 =
  struct
    val reverseOrder : order -> order
    val comparePair : ('a * 'a -> order) * ('b * 'b -> order)
                      -> ('a * 'b) * ('a * 'b) -> order
  end

  structure Bool3 =
  struct
    datatype bool3 = datatype bool3
    val fromBool : bool -> bool3
    val isTrue : bool3 -> bool
    val is : bool3 -> bool3 -> bool3
    val and3 : bool3 * bool3 -> bool3
    val or3 : bool3 * bool3 -> bool3
    val not3 : bool3 -> bool3
  end

  structure List2 =
  struct
    val onlyOne : {1:'a} list -> 'a
    val isNotEmpty : 'a list -> bool
    val prod : ('a * 'b) list * ('c * 'd) list
               -> ((('a * 'b) * ('c * 'd)) * ('b * 'd)) list
    val join : ('b * 'd -> 'e)
               -> ('a * 'b) list * ('c * 'd) list
               -> ((('a * 'b) * ('c * 'd)) * 'e) list
    val nub : ('a * 'a -> order) -> 'a list -> 'a list
    val sortBy : ('a -> 'b) -> ('b * 'b -> order) -> 'a list -> 'a list
    val groupBy : ('a -> 'b) -> ('b * 'b -> order) -> 'a list -> 'a list list
  end

  val wrap_int : int -> Ast.const
  val wrap_intInf : intInf -> Ast.const
  val wrap_word : word -> Ast.const
  val wrap_char : char -> Ast.const
  val wrap_bool : bool -> Ast.const
  val wrap_string : string -> Ast.const
  val wrap_real : real -> Ast.const
  val wrap_real32 : real32 -> Ast.const
  val wrap_numeric : numeric -> Ast.const
  val unwrap_int : Ast.const -> int
  val unwrap_intInf : Ast.const -> intInf
  val unwrap_word : Ast.const -> word
  val unwrap_char : Ast.const -> char
  val unwrap_bool : Ast.const -> bool
  val unwrap_string : Ast.const -> string
  val unwrap_real : Ast.const -> real
  val unwrap_real32 : Ast.const -> real32
  val unwrap_numeric : Ast.const -> numeric
  val unwrap_intOption : Ast.const -> int option
  val unwrap_intInfOption : Ast.const -> intInf option
  val unwrap_wordOption : Ast.const -> word option
  val unwrap_charOption : Ast.const -> char option
  val unwrap_boolOption : Ast.const -> bool option
  val unwrap_stringOption : Ast.const -> string option
  val unwrap_realOption : Ast.const -> real option
  val unwrap_real32Option : Ast.const -> real32 option
  val unwrap_numericOption : Ast.const -> numeric option
  val wrap =
      case 'a in 'a -> Ast.const of
        int => wrap_int
      | intInf => wrap_intInf
      | word => wrap_word
      | char => wrap_char
      | bool => wrap_bool
      | string => wrap_string
      | real => wrap_real
      | real32 => wrap_real32
      | numeric => wrap_numeric
  val unwrapInt =
      case 'a in Ast.const -> 'a of
        int => unwrap_int
      | intInf => unwrap_intInf
      | numeric => unwrap_numeric
      | 'b option =>
        case 'b in Ast.const -> 'b option of
          int => unwrap_intOption
        | intInf => unwrap_intInfOption
        | numeric => unwrap_numericOption
  val unwrapWord =
      case 'a in Ast.const -> 'a of
        word => unwrap_word
      | numeric => unwrap_numeric
      | 'b option =>
        case 'b in Ast.const -> 'b option of
          word => unwrap_wordOption
        | numeric => unwrap_numericOption
  val unwrapReal =
      case 'a in Ast.const -> 'a of
        real => unwrap_real
      | real32 => unwrap_real32
      | numeric => unwrap_numeric
      | 'b option =>
        case 'b in Ast.const -> 'b option of
          real => unwrap_realOption
        | real32 => unwrap_real32Option
        | numeric => unwrap_numericOption
  val unwrapString =
      case 'a in Ast.const -> 'a of
        string => unwrap_string
      | string option => unwrap_stringOption
  val unwrapChar =
      case 'a in Ast.const -> 'a of
        char => unwrap_char
      | char option => unwrap_charOption
  val unwrapBool =
      case 'a in Ast.const -> 'a of
        bool => unwrap_bool
      | bool option => unwrap_boolOption

  val toSQL_int : int -> ('a -> int, 'w) exp
  val toSQL_intInf : intInf -> ('a -> intInf, 'w) exp
  val toSQL_word : word -> ('a -> word, 'w) exp
  val toSQL_char : char -> ('a -> char, 'w) exp
  val toSQL_bool : bool -> ('a -> bool, 'w) exp
  val toSQL_string : string -> ('a -> string, 'w) exp
  val toSQL_real : real -> ('a -> real, 'w) exp
  val toSQL_real32 : real32 -> ('a -> real32, 'w) exp
  val toSQL_timestamp : timestamp -> ('a -> timestamp, 'w) exp
  val toSQL_numeric : numeric -> ('a -> numeric, 'w) exp
  val toSQL_intOption : int option -> ('a -> int option, 'w) exp
  val toSQL_intInfOption : IntInf.int option -> ('a -> intInf option, 'w) exp
  val toSQL_wordOption : word option -> ('a -> word option, 'w) exp
  val toSQL_charOption : char option -> ('a -> char option, 'w) exp
  val toSQL_boolOption : bool option -> ('a -> bool option, 'w) exp
  val toSQL_stringOption : string option -> ('a -> string option, 'w) exp
  val toSQL_realOption : real option -> ('a -> real option, 'w) exp
  val toSQL_real32Option : real32 option -> ('a -> real32 option, 'w) exp
  val toSQL_timestampOption
      : timestamp option -> ('a -> timestamp option, 'w) exp
  val toSQL_numericOption : numeric option -> ('a -> numeric option, 'w) exp

  type ('a,'w) op1 = ('a,'w) exp -> ('a,'w) exp
  type ('a,'w) op2 = ('a,'w) exp * ('a,'w) exp -> ('a,'w) exp
  type ('a,'b,'w) cmpop =
       ('a -> 'b, 'w) exp * ('a -> 'b, 'w) exp -> ('a -> bool3, 'w) exp

  val add_int : ('a -> int, 'w) op2
  val add_intInf : ('a -> intInf, 'w) op2
  val add_word : ('a -> word, 'w) op2
  val add_real : ('a -> real, 'w) op2
  val add_real32 : ('a -> real32, 'w) op2
  val add_numeric : ('a -> numeric, 'w) op2
  val add_intOption : ('a -> int option, 'w) op2
  val add_intInfOption : ('a -> intInf option, 'w) op2
  val add_wordOption : ('a -> word option, 'w) op2
  val add_realOption : ('a -> real option, 'w) op2
  val add_real32Option : ('a -> real32 option, 'w) op2
  val add_numericOption : ('a -> numeric option, 'w) op2

  val sub_int : ('a -> int, 'w) op2
  val sub_intInf : ('a -> intInf, 'w) op2
  val sub_word : ('a -> word, 'w) op2
  val sub_real : ('a -> real, 'w) op2
  val sub_real32 : ('a -> real32, 'w) op2
  val sub_numeric : ('a -> numeric, 'w) op2
  val sub_intOption : ('a -> int option, 'w) op2
  val sub_intInfOption : ('a -> intInf option, 'w) op2
  val sub_wordOption : ('a -> word option, 'w) op2
  val sub_realOption : ('a -> real option, 'w) op2
  val sub_real32Option : ('a -> real32 option, 'w) op2
  val sub_numericOption : ('a -> numeric option, 'w) op2

  val mul_int : ('a -> int, 'w) op2
  val mul_intInf : ('a -> intInf, 'w) op2
  val mul_word : ('a -> word, 'w) op2
  val mul_real : ('a -> real, 'w) op2
  val mul_real32 : ('a -> real32, 'w) op2
  val mul_numeric : ('a -> numeric, 'w) op2
  val mul_intOption : ('a -> int option, 'w) op2
  val mul_intInfOption : ('a -> intInf option, 'w) op2
  val mul_wordOption : ('a -> word option, 'w) op2
  val mul_realOption : ('a -> real option, 'w) op2
  val mul_real32Option : ('a -> real32 option, 'w) op2
  val mul_numericOption : ('a -> numeric option, 'w) op2

  val div_int : ('a -> int, 'w) op2
  val div_intInf : ('a -> intInf, 'w) op2
  val div_word : ('a -> word, 'w) op2
  val div_real : ('a -> real, 'w) op2
  val div_real32 : ('a -> real32, 'w) op2
  val div_numeric : ('a -> numeric, 'w) op2
  val div_intOption : ('a -> int option, 'w) op2
  val div_intInfOption : ('a -> intInf option, 'w) op2
  val div_wordOption : ('a -> word option, 'w) op2
  val div_realOption : ('a -> real option, 'w) op2
  val div_real32Option : ('a -> real32 option, 'w) op2
  val div_numericOption : ('a -> numeric option, 'w) op2

  val mod_int : ('a -> int, 'w) op2
  val mod_intInf : ('a -> intInf, 'w) op2
  val mod_word : ('a -> word, 'w) op2
  val mod_real : ('a -> real, 'w) op2
  val mod_real32 : ('a -> real32, 'w) op2
  val mod_numeric : ('a -> numeric, 'w) op2
  val mod_intOption : ('a -> int option, 'w) op2
  val mod_intInfOption : ('a -> intInf option, 'w) op2
  val mod_wordOption : ('a -> word option, 'w) op2
  val mod_realOption : ('a -> real option, 'w) op2
  val mod_real32Option : ('a -> real32 option, 'w) op2
  val mod_numericOption : ('a -> numeric option, 'w) op2

  val infix_mod_int : ('a -> int, 'w) op2
  val infix_mod_intInf : ('a -> intInf, 'w) op2
  val infix_mod_word : ('a -> word, 'w) op2
  val infix_mod_real : ('a -> real, 'w) op2
  val infix_mod_real32 : ('a -> real32, 'w) op2
  val infix_mod_numeric : ('a -> numeric, 'w) op2
  val infix_mod_intOption : ('a -> int option, 'w) op2
  val infix_mod_intInfOption : ('a -> intInf option, 'w) op2
  val infix_mod_wordOption : ('a -> word option, 'w) op2
  val infix_mod_realOption : ('a -> real option, 'w) op2
  val infix_mod_real32Option : ('a -> real32 option, 'w) op2
  val infix_mod_numericOption : ('a -> numeric option, 'w) op2

  val neg_int : ('a -> int, 'w) op1
  val neg_intInf : ('a -> intInf, 'w) op1
  val neg_word : ('a -> word, 'w) op1
  val neg_real : ('a -> real, 'w) op1
  val neg_real32 : ('a -> real32, 'w) op1
  val neg_numeric : ('a -> numeric, 'w) op1
  val neg_intOption : ('a -> int option, 'w) op1
  val neg_intInfOption : ('a -> intInf option, 'w) op1
  val neg_wordOption : ('a -> word option, 'w) op1
  val neg_realOption : ('a -> real option, 'w) op1
  val neg_real32Option : ('a -> real32 option, 'w) op1
  val neg_numericOption : ('a -> numeric option, 'w) op1

  val abs_int : ('a -> int, 'w) op1
  val abs_intInf : ('a -> intInf, 'w) op1
  val abs_word : ('a -> word, 'w) op1
  val abs_real : ('a -> real, 'w) op1
  val abs_real32 : ('a -> real32, 'w) op1
  val abs_numeric : ('a -> numeric, 'w) op1
  val abs_intOption : ('a -> int option, 'w) op1
  val abs_intInfOption : ('a -> intInf option, 'w) op1
  val abs_wordOption : ('a -> word option, 'w) op1
  val abs_realOption : ('a -> real option, 'w) op1
  val abs_real32Option : ('a -> real32 option, 'w) op1
  val abs_numericOption : ('a -> numeric option, 'w) op1

  val lt_int : ('a, int, 'w) cmpop
  val lt_intInf : ('a, intInf, 'w) cmpop
  val lt_word : ('a, word, 'w) cmpop
  val lt_char : ('a, char, 'w) cmpop
  val lt_bool : ('a, bool, 'w) cmpop
  val lt_string : ('a, string, 'w) cmpop
  val lt_real : ('a, real, 'w) cmpop
  val lt_real32 : ('a, real32, 'w) cmpop
  val lt_timestamp : ('a, timestamp, 'w) cmpop
  val lt_numeric : ('a, numeric, 'w) cmpop
  val lt_intOption : ('a, int option, 'w) cmpop
  val lt_intInfOption : ('a, intInf option, 'w) cmpop
  val lt_wordOption : ('a, word option, 'w) cmpop
  val lt_charOption : ('a, char option, 'w) cmpop
  val lt_boolOption : ('a, bool option, 'w) cmpop
  val lt_stringOption : ('a, string option, 'w) cmpop
  val lt_realOption : ('a, real option, 'w) cmpop
  val lt_real32Option : ('a, real32 option, 'w) cmpop
  val lt_timestampOption : ('a, timestamp option, 'w) cmpop
  val lt_numericOption : ('a, numeric option, 'w) cmpop

  val gt_int : ('a, int, 'w) cmpop
  val gt_intInf : ('a, intInf, 'w) cmpop
  val gt_word : ('a, word, 'w) cmpop
  val gt_char : ('a, char, 'w) cmpop
  val gt_bool : ('a, bool, 'w) cmpop
  val gt_string : ('a, string, 'w) cmpop
  val gt_real : ('a, real, 'w) cmpop
  val gt_real32 : ('a, real32, 'w) cmpop
  val gt_timestamp : ('a, timestamp, 'w) cmpop
  val gt_numeric : ('a, numeric, 'w) cmpop
  val gt_intOption : ('a, int option, 'w) cmpop
  val gt_intInfOption : ('a, intInf option, 'w) cmpop
  val gt_wordOption : ('a, word option, 'w) cmpop
  val gt_charOption : ('a, char option, 'w) cmpop
  val gt_boolOption : ('a, bool option, 'w) cmpop
  val gt_stringOption : ('a, string option, 'w) cmpop
  val gt_realOption : ('a, real option, 'w) cmpop
  val gt_real32Option : ('a, real32 option, 'w) cmpop
  val gt_timestampOption : ('a, timestamp option, 'w) cmpop
  val gt_numericOption : ('a, numeric option, 'w) cmpop

  val le_int : ('a, int, 'w) cmpop
  val le_intInf : ('a, intInf, 'w) cmpop
  val le_word : ('a, word, 'w) cmpop
  val le_char : ('a, char, 'w) cmpop
  val le_bool : ('a, bool, 'w) cmpop
  val le_string : ('a, string, 'w) cmpop
  val le_real : ('a, real, 'w) cmpop
  val le_real32 : ('a, real32, 'w) cmpop
  val le_timestamp : ('a, timestamp, 'w) cmpop
  val le_numeric : ('a, numeric, 'w) cmpop
  val le_intOption : ('a, int option, 'w) cmpop
  val le_intInfOption : ('a, intInf option, 'w) cmpop
  val le_wordOption : ('a, word option, 'w) cmpop
  val le_charOption : ('a, char option, 'w) cmpop
  val le_boolOption : ('a, bool option, 'w) cmpop
  val le_stringOption : ('a, string option, 'w) cmpop
  val le_realOption : ('a, real option, 'w) cmpop
  val le_real32Option : ('a, real32 option, 'w) cmpop
  val le_timestampOption : ('a, timestamp option, 'w) cmpop
  val le_numericOption : ('a, numeric option, 'w) cmpop

  val ge_int : ('a, int, 'w) cmpop
  val ge_intInf : ('a, intInf, 'w) cmpop
  val ge_word : ('a, word, 'w) cmpop
  val ge_char : ('a, char, 'w) cmpop
  val ge_bool : ('a, bool, 'w) cmpop
  val ge_string : ('a, string, 'w) cmpop
  val ge_real : ('a, real, 'w) cmpop
  val ge_real32 : ('a, real32, 'w) cmpop
  val ge_timestamp : ('a, timestamp, 'w) cmpop
  val ge_numeric : ('a, numeric, 'w) cmpop
  val ge_intOption : ('a, int option, 'w) cmpop
  val ge_intInfOption : ('a, intInf option, 'w) cmpop
  val ge_wordOption : ('a, word option, 'w) cmpop
  val ge_charOption : ('a, char option, 'w) cmpop
  val ge_boolOption : ('a, bool option, 'w) cmpop
  val ge_stringOption : ('a, string option, 'w) cmpop
  val ge_realOption : ('a, real option, 'w) cmpop
  val ge_real32Option : ('a, real32 option, 'w) cmpop
  val ge_timestampOption : ('a, timestamp option, 'w) cmpop
  val ge_numericOption : ('a, numeric option, 'w) cmpop

  val eq_int : ('a, int, 'w) cmpop
  val eq_intInf : ('a, intInf, 'w) cmpop
  val eq_word : ('a, word, 'w) cmpop
  val eq_char : ('a, char, 'w) cmpop
  val eq_bool : ('a, bool, 'w) cmpop
  val eq_string : ('a, string, 'w) cmpop
  val eq_real : ('a, real, 'w) cmpop
  val eq_real32 : ('a, real32, 'w) cmpop
  val eq_timestamp : ('a, timestamp, 'w) cmpop
  val eq_numeric : ('a, numeric, 'w) cmpop
  val eq_intOption : ('a, int option, 'w) cmpop
  val eq_intInfOption : ('a, intInf option, 'w) cmpop
  val eq_wordOption : ('a, word option, 'w) cmpop
  val eq_charOption : ('a, char option, 'w) cmpop
  val eq_boolOption : ('a, bool option, 'w) cmpop
  val eq_stringOption : ('a, string option, 'w) cmpop
  val eq_realOption : ('a, real option, 'w) cmpop
  val eq_real32Option : ('a, real32 option, 'w) cmpop
  val eq_timestampOption : ('a, timestamp option, 'w) cmpop
  val eq_numericOption : ('a, numeric option, 'w) cmpop

  val neq_int : ('a, int, 'w) cmpop
  val neq_intInf : ('a, intInf, 'w) cmpop
  val neq_word : ('a, word, 'w) cmpop
  val neq_char : ('a, char, 'w) cmpop
  val neq_bool : ('a, bool, 'w) cmpop
  val neq_string : ('a, string, 'w) cmpop
  val neq_real : ('a, real, 'w) cmpop
  val neq_real32 : ('a, real32, 'w) cmpop
  val neq_timestamp : ('a, timestamp, 'w) cmpop
  val neq_numeric : ('a, numeric, 'w) cmpop
  val neq_intOption : ('a, int option, 'w) cmpop
  val neq_intInfOption : ('a, intInf option, 'w) cmpop
  val neq_wordOption : ('a, word option, 'w) cmpop
  val neq_charOption : ('a, char option, 'w) cmpop
  val neq_boolOption : ('a, bool option, 'w) cmpop
  val neq_stringOption : ('a, string option, 'w) cmpop
  val neq_realOption : ('a, real option, 'w) cmpop
  val neq_real32Option : ('a, real32 option, 'w) cmpop
  val neq_timestampOption : ('a, timestamp option, 'w) cmpop
  val neq_numericOption : ('a, numeric option, 'w) cmpop

  val nullif_intOption : ('a -> int option, 'w) op2
  val nullif_intInfOption : ('a -> intInf option, 'w) op2
  val nullif_wordOption : ('a -> word option, 'w) op2
  val nullif_charOption : ('a -> char option, 'w) op2
  val nullif_boolOption : ('a -> bool option, 'w) op2
  val nullif_stringOption : ('a -> string option, 'w) op2
  val nullif_realOption : ('a -> real option, 'w) op2
  val nullif_real32Option : ('a -> real32 option, 'w) op2
  val nullif_timestampOption : ('a -> timestamp option, 'w) op2
  val nullif_numericOption : ('a -> numeric option, 'w) op2

  val concat_string : ('a -> string, 'w) op2
  val concat_stringOption : ('a -> string option, 'w) op2

  val like_string : ('a, string, 'w) cmpop
  val like_stringOption : ('a, string option, 'w) cmpop

  type ('a,'b,'c,'w) aggop = ('a -> 'b list, 'w) exp -> ('a -> 'c, 'w) exp

  val avg_int : ('a, int, numeric option, 'w) aggop
  val avg_intInf : ('a, intInf, numeric option, 'w) aggop
  val avg_word : ('a, word, numeric option, 'w) aggop
  val avg_real : ('a, real, numeric option, 'w) aggop
  val avg_real32 : ('a, real32, numeric option, 'w) aggop
  val avg_numeric : ('a, numeric, numeric option, 'w) aggop
  val avg_intOption : ('a, int option, numeric option, 'w) aggop
  val avg_intInfOption : ('a, intInf option, numeric option, 'w) aggop
  val avg_wordOption : ('a, word option, numeric option, 'w) aggop
  val avg_realOption : ('a, real option, numeric option, 'w) aggop
  val avg_real32Option : ('a, real32 option, numeric option, 'w) aggop
  val avg_numericOption : ('a, numeric option, numeric option, 'w) aggop

  val sum_int : ('a, int, int option, 'w) aggop
  val sum_intInf : ('a, intInf, intInf option, 'w) aggop
  val sum_word : ('a, word, word option, 'w) aggop
  val sum_real : ('a, real, real option, 'w) aggop
  val sum_real32 : ('a, real32, real32 option, 'w) aggop
  val sum_numeric : ('a, numeric, numeric option, 'w) aggop
  val sum_intOption : ('a, int option, int option, 'w) aggop
  val sum_intInfOption : ('a, intInf option, intInf option, 'w) aggop
  val sum_wordOption : ('a, word option, word option, 'w) aggop
  val sum_realOption : ('a, real option, real option, 'w) aggop
  val sum_real32Option : ('a, real32 option, real32 option, 'w) aggop
  val sum_numericOption : ('a, numeric option, numeric option, 'w) aggop

  val max_int : ('a, int, int option, 'w) aggop
  val max_intInf : ('a, intInf, intInf option, 'w) aggop
  val max_word : ('a, word, word option, 'w) aggop
  val max_char : ('a, char, char option, 'w) aggop
  val max_bool : ('a, bool, bool option, 'w) aggop
  val max_string : ('a, string, string option, 'w) aggop
  val max_real : ('a, real, real option, 'w) aggop
  val max_real32 : ('a, real32, real32 option, 'w) aggop
  val max_timestamp : ('a, timestamp, timestamp option, 'w) aggop
  val max_numeric : ('a, numeric, numeric option, 'w) aggop
  val max_intOption : ('a, int option, int option, 'w) aggop
  val max_intInfOption : ('a, intInf option, intInf option, 'w) aggop
  val max_wordOption : ('a, word option, word option, 'w) aggop
  val max_charOption : ('a, char option, char option, 'w) aggop
  val max_boolOption : ('a, bool option, bool option, 'w) aggop
  val max_stringOption : ('a, string option, string option, 'w) aggop
  val max_realOption : ('a, real option, real option, 'w) aggop
  val max_real32Option : ('a, real32 option, real32 option, 'w) aggop
  val max_timestampOption : ('a, timestamp option, timestamp option, 'w) aggop
  val max_numericOption : ('a, numeric option, numeric option, 'w) aggop

  val min_int : ('a, int, int option, 'w) aggop
  val min_intInf : ('a, intInf, intInf option, 'w) aggop
  val min_word : ('a, word, word option, 'w) aggop
  val min_char : ('a, char, char option, 'w) aggop
  val min_bool : ('a, bool, bool option, 'w) aggop
  val min_string : ('a, string, string option, 'w) aggop
  val min_real : ('a, real, real option, 'w) aggop
  val min_real32 : ('a, real32, real32 option, 'w) aggop
  val min_timestamp : ('a, timestamp, timestamp option, 'w) aggop
  val min_numeric : ('a, numeric, numeric option, 'w) aggop
  val min_intOption : ('a, int option, int option, 'w) aggop
  val min_intInfOption : ('a, intInf option, intInf option, 'w) aggop
  val min_wordOption : ('a, word option, word option, 'w) aggop
  val min_charOption : ('a, char option, char option, 'w) aggop
  val min_boolOption : ('a, bool option, bool option, 'w) aggop
  val min_stringOption : ('a, string option, string option, 'w) aggop
  val min_realOption : ('a, real option, real option, 'w) aggop
  val min_real32Option : ('a, real32 option, real32 option, 'w) aggop
  val min_timestampOption : ('a, timestamp option, timestamp option, 'w) aggop
  val min_numericOption : ('a, numeric option, numeric option, 'w) aggop

  val count : ('a, 'b, int, 'w) aggop
  val count_option : ('a, 'b option, int, 'w) aggop

  val Num_int : ('a -> int, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_intInf : ('a -> intInf, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_word : ('a -> word, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_real : ('a -> real, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_real32 : ('a -> real32, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_numeric : ('a -> numeric, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_intOption : ('a -> int option, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_intInfOption : ('a -> intInf option, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_wordOption : ('a -> word option, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_realOption : ('a -> real option, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_real32Option : ('a -> real32 option, 'w) exp -> ('a -> numeric option, 'w) exp
  val Num_numericOption : ('a -> numeric option, 'w) exp -> ('a -> numeric option, 'w) exp

  structure Op =
  struct

    val toSQL =
        case 'a in 'a -> ('c -> 'a, 'w) exp of
          int => toSQL_int
        | intInf => toSQL_intInf
        | word => toSQL_word
        | char => toSQL_char
        | bool => toSQL_bool
        | string => toSQL_string
        | real => toSQL_real
        | real32 => toSQL_real32
        | timestamp => toSQL_timestamp
        | numeric => toSQL_numeric
        | 'b option =>
          case 'b in 'b option -> ('c -> 'b option, 'w) exp of
            int => toSQL_intOption
          | intInf => toSQL_intInfOption
          | word => toSQL_wordOption
          | char => toSQL_charOption
          | bool => toSQL_boolOption
          | string => toSQL_stringOption
          | real => toSQL_realOption
          | real32 => toSQL_real32Option
          | timestamp => toSQL_timestampOption
          | numeric => toSQL_numericOption

    val + =
        case 'b in ('a -> 'b, 'w) op2 of
          int => add_int
        | intInf => add_intInf
        | word => add_word
        | real => add_real
        | real32 => add_real32
        | numeric => add_numeric
        | 'c option =>
          case 'c in ('a -> 'c option, 'w) op2 of
            int => add_intOption
          | intInf => add_intInfOption
          | word => add_wordOption
          | real => add_realOption
          | real32 => add_real32Option
          | numeric => add_numericOption

    val - =
        case 'b in ('a -> 'b, 'w) op2 of
          int => sub_int
        | intInf => sub_intInf
        | word => sub_word
        | real => sub_real
        | real32 => sub_real32
        | numeric => sub_numeric
        | 'c option =>
          case 'c in ('a -> 'c option, 'w) op2 of
            int => sub_intOption
          | intInf => sub_intInfOption
          | word => sub_wordOption
          | real => sub_realOption
          | real32 => sub_real32Option
	  | numeric => sub_numericOption

    val * =
        case 'b in ('a -> 'b, 'w) op2 of
          int => mul_int
        | intInf => mul_intInf
        | word => mul_word
        | real => mul_real
        | real32 => mul_real32
        | numeric => mul_numeric
        | 'c option =>
          case 'c in ('a -> 'c option, 'w) op2 of
            int => mul_intOption
          | intInf => mul_intInfOption
          | word => mul_wordOption
          | real => mul_realOption
          | real32 => mul_real32Option
	  | numeric => mul_numericOption

    val / =
        case 'b in ('a -> 'b, 'w) op2 of
          int => div_int
        | intInf => div_intInf
        | word => div_word
        | real => div_real
        | real32 => div_real32
        | numeric => div_numeric
        | 'c option =>
          case 'c in ('a -> 'c option, 'w) op2 of
            int => div_intOption
          | intInf => div_intInfOption
          | word => div_wordOption
          | real => div_realOption
          | real32 => div_real32Option
	  | numeric => mul_numericOption

    val mod =
        case 'b in ('a -> 'b, 'w) op2 of
          int => mod_int
        | intInf => mod_intInf
        | word => mod_word
        | real => mod_real
        | real32 => mod_real32
        | numeric => mod_numeric
        | 'c option =>
          case 'c in ('a -> 'c option, 'w) op2 of
            int => mod_intOption
          | intInf => mod_intInfOption
          | word => mod_wordOption
          | real => mod_realOption
          | real32 => mod_real32Option
	  | numeric => mod_numericOption

    val % =
        case 'b in ('a -> 'b, 'w) op2 of
          int => infix_mod_int
        | intInf => infix_mod_intInf
        | word => infix_mod_word
        | real => infix_mod_real
        | real32 => infix_mod_real32
        | numeric => infix_mod_numeric
        | 'c option =>
          case 'c in ('a -> 'c option, 'w) op2 of
            int => infix_mod_intOption
          | intInf => infix_mod_intInfOption
          | word => infix_mod_wordOption
          | real => infix_mod_realOption
          | real32 => infix_mod_real32Option
	  | numeric => infix_mod_numericOption

    val ~ =
        case 'b in ('a -> 'b, 'w) op1 of
          int => neg_int
        | intInf => neg_intInf
        | word => neg_word
        | real => neg_real
        | real32 => neg_real32
        | numeric => neg_numeric
        | 'c option =>
          case 'c in ('a -> 'c option, 'w) op1 of
            int => neg_intOption
          | intInf => neg_intInfOption
          | word => neg_wordOption
          | real => neg_realOption
          | real32 => neg_real32Option
	  | numeric => neg_numericOption

    val abs =
        case 'b in ('a -> 'b, 'w) op1 of
          int => abs_int
        | intInf => abs_intInf
        | word => abs_word
        | real => abs_real
        | real32 => abs_real32
        | numeric => abs_numeric
        | 'c option =>
          case 'c in ('a -> 'c option, 'w) op1 of
            int => abs_intOption
          | intInf => abs_intInfOption
          | word => abs_wordOption
          | real => abs_realOption
          | real32 => abs_real32Option
	  | numeric => abs_numericOption

    val < =
        case 'b in ('a, 'b, 'w) cmpop of
          int => lt_int
        | intInf => lt_intInf
        | word => lt_word
        | char => lt_char
        | bool => lt_bool
        | real => lt_real
        | real32 => lt_real32
        | string => lt_string
        | timestamp => lt_timestamp
        | numeric => lt_numeric
        | 'c option =>
          case 'c in ('a, 'c option, 'w) cmpop of
            int => lt_intOption
          | intInf => lt_intInfOption
          | word => lt_wordOption
          | char => lt_charOption
          | bool => lt_boolOption
          | real => lt_realOption
          | real32 => lt_real32Option
          | string => lt_stringOption
          | timestamp => lt_timestampOption
          | numeric => lt_numericOption

    val > =
        case 'b in ('a, 'b, 'w) cmpop of
          int => gt_int
        | intInf => gt_intInf
        | word => gt_word
        | char => gt_char
        | bool => gt_bool
        | real => gt_real
        | real32 => gt_real32
        | string => gt_string
        | timestamp => gt_timestamp
        | numeric => gt_numeric
        | 'c option =>
          case 'c in ('a, 'c option, 'w) cmpop of
            int => gt_intOption
          | intInf => gt_intInfOption
          | word => gt_wordOption
          | char => gt_charOption
          | bool => gt_boolOption
          | real => gt_realOption
          | real32 => gt_real32Option
          | string => gt_stringOption
          | timestamp => gt_timestampOption
          | numeric => gt_numericOption

    val <= =
        case 'b in ('a, 'b, 'w) cmpop of
          int => le_int
        | intInf => le_intInf
        | word => le_word
        | char => le_char
        | bool => le_bool
        | real => le_real
        | real32 => le_real32
        | string => le_string
        | timestamp => le_timestamp
        | numeric => le_numeric
        | 'c option =>
          case 'c in ('a, 'c option, 'w) cmpop of
            int => le_intOption
          | intInf => le_intInfOption
          | word => le_wordOption
          | char => le_charOption
          | bool => le_boolOption
          | real => le_realOption
          | real32 => le_real32Option
          | string => le_stringOption
          | timestamp => le_timestampOption
          | numeric => le_numericOption

    val >= =
        case 'b in ('a, 'b, 'w) cmpop of
          int => ge_int
        | intInf => ge_intInf
        | word => ge_word
        | char => ge_char
        | bool => ge_bool
        | real => ge_real
        | real32 => ge_real32
        | string => ge_string
        | timestamp => ge_timestamp
        | numeric => ge_numeric
        | 'c option =>
          case 'c in ('a, 'c option, 'w) cmpop of
            int => ge_intOption
          | intInf => ge_intInfOption
          | word => ge_wordOption
          | char => ge_charOption
          | bool => ge_boolOption
          | real => ge_realOption
          | real32 => ge_real32Option
          | string => ge_stringOption
          | timestamp => ge_timestampOption
          | numeric => ge_numericOption

    val = =
        case 'b in ('a, 'b, 'w) cmpop of
          int => eq_int
        | intInf => eq_intInf
        | word => eq_word
        | char => eq_char
        | bool => eq_bool
        | real => eq_real
        | real32 => eq_real32
        | string => eq_string
        | timestamp => eq_timestamp
        | numeric => eq_numeric
        | 'c option =>
          case 'c in ('a, 'c option, 'w) cmpop of
            int => eq_intOption
          | intInf => eq_intInfOption
          | word => eq_wordOption
          | char => eq_charOption
          | bool => eq_boolOption
          | real => eq_realOption
          | real32 => eq_real32Option
          | string => eq_stringOption
          | timestamp => eq_timestampOption
          | numeric => eq_numericOption

    val <> =
        case 'b in ('a, 'b, 'w) cmpop of
          int => neq_int
        | intInf => neq_intInf
        | word => neq_word
        | char => neq_char
        | bool => neq_bool
        | real => neq_real
        | real32 => neq_real32
        | string => neq_string
        | timestamp => neq_timestamp
        | numeric => neq_numeric
        | 'c option =>
          case 'c in ('a, 'c option, 'w) cmpop of
            int => neq_intOption
          | intInf => neq_intInfOption
          | word => neq_wordOption
          | char => neq_charOption
          | bool => neq_boolOption
          | real => neq_realOption
          | real32 => neq_real32Option
          | string => neq_stringOption
          | timestamp => neq_timestampOption
          | numeric => neq_numericOption

    val || =
        case 'b in ('a -> 'b, 'w) op2 of
          string => concat_string
        | string option => concat_stringOption

    val like =
        case 'b in ('a, 'b, 'w) cmpop of
          string => like_string
        | string option => like_stringOption

    val Some : ('a -> 'b, 'w) exp -> ('a -> 'b option, 'w) exp
    val Part : ('a -> 'b option list, 'w) exp -> ('a -> 'b list, 'w) exp

    val Num =
        case 'b in ('a -> 'b, 'w) exp -> ('a -> numeric option, 'w) exp of
          int => Num_int
        | intInf => Num_intInf
        | word => Num_word
        | real => Num_real
        | real32 => Num_real32
        | numeric => Num_numeric
        | 'c option =>
          case 'c in ('a -> 'c option, 'w) exp -> ('a -> numeric option, 'w) exp of
            int => Num_intOption
          | intInf => Num_intInfOption
          | word => Num_wordOption
          | real => Num_realOption
          | real32 => Num_real32Option
	  | numeric => Num_numericOption

    val coalesce
        : ('a -> 'b option, 'w) exp * ('a -> 'b, 'w) exp -> ('a -> 'b, 'w) exp
    val coalesce'
        : ('a -> 'b option, 'w) exp * ('a -> 'b option, 'w) exp -> ('a -> 'b option, 'w) exp

    val nullif =
        case 'b in ('a -> 'b option, 'w) op2 of
          int => nullif_intOption
        | intInf => nullif_intInfOption
        | word => nullif_wordOption
        | char => nullif_charOption
        | bool => nullif_boolOption
        | real => nullif_realOption
        | real32 => nullif_real32Option
        | string => nullif_stringOption
        | timestamp => nullif_timestampOption
        | numeric => nullif_numericOption

    val avg =
        case 'b in ('a, 'b, numeric option, 'w) aggop of
          int => avg_int
        | intInf => avg_intInf
        | word => avg_word
        | real => avg_real
        | real32 => avg_real32
        | numeric => avg_numeric
        | 'c option =>
          case 'c in ('a, 'c option, numeric option, 'w) aggop of
            int => avg_intOption
          | intInf => avg_intInfOption
          | word => avg_wordOption
          | real => avg_realOption
          | real32 => avg_real32Option
	  | numeric => avg_numericOption

    val count =
        case 'b in ('a, 'b, int, 'w) aggop of
          int => count
        | intInf => count
        | word => count
        | char => count
        | bool => count
        | real => count
        | real32 => count
        | string => count
        | timestamp => count
        | numeric => count
        | 'c option => count_option

    val sum =
        case 'b in ('a, 'b, 'b option, 'w) aggop of
          int => sum_int
        | intInf => sum_intInf
        | word => sum_word
        | real => sum_real
        | real32 => sum_real32
        | numeric => sum_numeric

    val sum' =
        case 'b in ('a, 'b option, 'b option, 'w) aggop of
          int => sum_intOption
        | intInf => sum_intInfOption
        | word => sum_wordOption
        | real => sum_realOption
        | real32 => sum_real32Option
        | numeric => sum_numericOption

    val min =
        case 'b in ('a, 'b, 'b option, 'w) aggop of
          int => min_int
        | intInf => min_intInf
        | word => min_word
        | char => min_char
        | bool => min_bool
        | real => min_real
        | real32 => min_real32
        | string => min_string
        | timestamp => min_timestamp
        | numeric => min_numeric

    val min' =
        case 'b in ('a, 'b option, 'b option, 'w) aggop of
          int => min_intOption
        | intInf => min_intInfOption
        | word => min_wordOption
        | char => min_charOption
        | bool => min_boolOption
        | real => min_realOption
        | real32 => min_real32Option
        | string => min_stringOption
        | timestamp => min_timestampOption
        | numeric => min_numericOption

    val max =
        case 'b in ('a, 'b, 'b option, 'w) aggop of
          int => max_int
        | intInf => max_intInf
        | word => max_word
        | char => max_char
        | bool => max_bool
        | real => max_real
        | real32 => max_real32
        | string => max_string
        | timestamp => max_timestamp
        | numeric => max_numeric

    val max' =
        case 'b in ('a, 'b option, 'b option, 'w) aggop of
          int => max_intOption
        | intInf => max_intInfOption
        | word => max_wordOption
        | char => max_charOption
        | bool => max_boolOption
        | real => max_realOption
        | real32 => max_real32Option
        | string => max_stringOption
        | timestamp => max_timestampOption
        | numeric => max_numericOption

  end

end
